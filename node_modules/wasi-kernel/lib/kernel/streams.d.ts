/// <reference types="node" />
import { EventEmitter } from 'events';
import { SharedQueue, SharedQueueProps } from './bits/queue';
declare class SimplexStream extends EventEmitter {
    queue: SharedQueue<Uint8Array>;
    meta: Int32Array;
    pos: number;
    blocking: boolean;
    constructor(_from?: SimplexStreamProps);
    static from(props: SimplexStreamProps): SimplexStream;
    to(): SimplexStreamProps;
    get length(): number;
    set length(l: number);
    read(readBuffer: Uint8Array, offset: number, length: number, position: any): number;
    write(writeBuffer: Uint8Array): number;
    end(): void;
    reset(): void;
}
declare type SimplexStreamProps = {
    queue?: SharedQueueProps<Uint8Array>;
    meta?: Int32Array;
};
declare class TransformStreamDuplex extends EventEmitter {
    ts: TransformStream;
    writer: WritableStreamDefaultWriter;
    reader: ReadableStreamReader;
    constructor(ts: TransformStream);
    write(data: Uint8Array): void;
    end(): void;
}
export { SimplexStream, TransformStreamDuplex };
