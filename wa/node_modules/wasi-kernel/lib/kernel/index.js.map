{"version":3,"sources":["bits/queue.ts","streams.ts","bits/stubs.ts","bits/dyld.ts","bits/fs.ts","bits/proc.ts","../infra/arch.ts","bindings/workers.ts","../../../../../../../opt/homebrew/lib/node_modules/parcel/src/builtins/bundle-url.js","../../../../../../../opt/homebrew/lib/node_modules/parcel/src/builtins/bundle-loader.js","bits/tty.ts","bindings/utf8.ts","exec.ts","process.ts","services/shared-fs.ts","index.ts","../../../../../../../opt/homebrew/lib/node_modules/parcel/src/builtins/loaders/node/js-loader.js"],"names":["bundleURL","getBundleURLCached","getBundleURL","Error","err","matches","stack","match","getBaseURL","url","replace","exports","require","loadBundlesLazy","bundles","Array","isArray","id","length","Promise","resolve","code","LazyPromise","reject","loadBundles","slice","then","all","map","loadBundle","bundleLoaders","registerBundleLoader","type","loader","module","load","register","bundle","substring","lastIndexOf","toLowerCase","bundleLoader","resolved","catch","e","executor","promise","prototype","onSuccess","onError","fs","readFile","__dirname","data","setImmediate","Function"],"mappings":"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KAAA,OAAS,KAAK,IACd,KAAA,MAAM,QAAQ,GAGvB,QACS,KAAA,QAAU,EACV,KAAA,IAAM,EACN,KAAA,UAAW,GA2CxB,QAAA,cAAA,EAhCA,MAAM,UAA8B,EAApC,aAMI,YAAY,GACR,QACK,KAAA,GAAK,EACL,KAAA,OAAS,KAAK,GAAG,SAAS,YAC1B,KAAA,OAAS,KAAK,GAAG,SAAS,YAE9B,WACU,OAAM,CACL,IAAA,KAAC,EAAD,MAAO,SAAe,KAAK,OAAO,OAElC,GADA,GAAO,KAAK,KAAK,OAAQ,GACzB,EAAM,CAAO,KAAA,KAAK,OAAQ,SAJrC,GASL,MAAM,GACG,KAAA,OAAO,MAAM,GAGtB,MACS,KAAA,OAAO,SAMpB,QAAA,sBAAA,EAAA,MAAM,EAAqD,oBAArB,kBAChC,kBAAoB;;ACgCX,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EApJf,IAAI,EAAQ,CACR,SACA,QACA,OACA,MACA,OACA,QACA,QACA,SACA,SACA,WACA,aACA,WACA,YACA,OACA,SACA,OACA,SACA,UACA,UACA,UACA,YACA,YACA,QACA,UACA,SACA,UACA,SACA,UACA,QACA,YACA,YACA,aACA,cACA,aACA,eACA,cACA,UACA,YACA,cACA,QACA,YACA,eACA,cACA,WACA,aACA,WACA,WACA,WACA,WACA,WACA,UACA,eACA,WACA,gBACA,SACA,QACA,SACA,SACA,WACA,QACA,SACA,WACA,SACA,UACA,SACA,SACA,UACA,WACA,WACA,YACA,UACA,eACA,aACA,UACA,UACA,YACA,SACA,UACA,QACA,SACA,OACA,SAEA,cACA,eACA,uBACA,0BACA,2BACA,6BACA,gCACA,mCACA,mCACA,oCACA,mCAEA,qBACA,qBACA,yBACA,sBACA,uBACA,uBACA,wBACA,oBACA,oBACA,oBACA,4BACA,uBACA,iBACA,iBACA,eACA,eACA,wBACA,qBACA,qBACA,sBACA,sBAEA,UACA,WACA,UACA,UACA,QACA,QAEA,cACA,cACA,cACA,cACA,cACA,UACA,UACA,SACA,YAGJ,MAAM,EAGF,CACA,MAAQ,OAEZ,IAAK,IAAI,KAAM,EACX,EAAM,GAAM,WACR,EAAM,kBAAkB,MAAO,IAAI,gBAI5B,IAAA,EAAA,EAAA,QAAA,QAAA;;AC2Ed,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,QAAA,mBAAA,EA3ND,MAAM,EAMF,YAAY,GACH,KAAA,KAAO,EAGhB,QAAQ,EAAc,EAAa,GAI3B,GAHC,KAAK,aACN,KAAK,WAAa,IAAI,EAAe,QAErC,KAAK,WAAW,IAAI,IAAI,GAErB,OAAA,KAAK,KAAK,aAAa,GAAK,KAAK,IAC/B,KAAA,WAAW,IAAI,IAAI,EAAM,IAAI,EAAe,IAAI,EAAG,MAI5D,aACO,OAAA,EAAQ,KAAM,CAAC,SAAU,UAGhC,aACO,OAAA,EAAQ,KAAM,CAAC,gBAO1B,OAAO,EAAW,GACV,IAAA,EAAW,KAAK,eAAe,GAAM,SAAS,SAE9C,GADC,KAAA,KAAK,iBAAiB,OAAc,OACpC,KAAK,WAAY,OAAO,EACzB,IAAA,EAAM,KAAK,WAAW,IAAI,IAAI,GAC9B,GAAA,EAAK,CACD,IAAA,EAAW,EAAI,YAAY,KAAK,MAChC,EAAS,KAAK,WAAW,IAAI,KAAO,EAEjC,OADF,KAAA,WAAW,IAAI,IAAI,EAAQ,CAAC,SAAA,IAC1B,EAGA,OAAA,EAIf,MAAM,EAAa,GACX,IAAA,EAAa,KAAK,eAAe,GAAQ,SAAS,SAElD,EAAM,KAAK,WAAW,IAAI,IAAI,GAC9B,GAAA,EAAK,CACD,IAAA,EAAM,EAAI,SAAS,QAAQ,GAC3B,GAAA,GAAO,aAAe,SACf,OAAA,KAAK,aAAa,GAG1B,OAAA,EAGX,YAAY,GAED,OAAA,KAAK,kBADF,cACyB,GAGvC,aAAa,GACL,IAAA,EAAI,KAAK,KAAK,KAAK,UAAU,KAAK,GAE/B,OADF,KAAA,KAAK,KAAK,UAAU,IAAI,EAAG,GACzB,EAKX,eAAe,GACJ,OAAA,KAAK,KAAK,KAAK,eAAe,GAGzC,kBAAkB,EAAW,GAClB,OAAA,KAAK,KAAK,KAAK,kBAAkB,EAAG,IAMnD,IAAU,EAkIV,SAAS,EAAQ,EAAe,GACrB,OAAA,EAAQ,OAAO,CAAC,EAAG,IACtB,OAAO,OAAO,EAAG,CAAE,CAAA,GAAI,EAAS,GAAG,KAAK,KAAa,IAC5D,QAAA,cAAA,EAAA,QAAA,eAAA,EArID,SAAU,GAEO,EAAA,MAAA,MAAb,cACI,KAAA,IAAwB,IAAI,IAC5B,KAAA,IAAqB,IAAI,MAGhB,EAAA,IAAA,MAQT,YAAY,EAA4B,EAAqB,IAJ7D,KAAA,UAAoB,MACpB,KAAA,UAAoB,GACpB,KAAA,QAAkB,KAGT,KAAA,OAAS,EACT,KAAA,MAAQ,EAGjB,YAAY,GACJ,IACA,EADa,EAAK,KAAK,OAAO,OAAO,WACb,KAAK,UAC7B,EAAW,EAAK,KAAK,UAAU,OAEnC,EAAK,KAAK,OAAO,KAAK,KAAK,WAC3B,EAAK,KAAK,UAAU,KAAK,KAAK,SAE1B,IAAA,EAAU,KAAK,QAAQ,KAAK,OAAQ,EAAK,KAAK,UAC9C,EAAW,IAAI,YAAY,SAAS,KAAK,OAAQ,CACjD,IAAG,EAAA,EAAA,CACC,OAAQ,EAAK,KAAK,OAClB,MAAO,EAAK,KAAK,UACjB,0BAA2B,EAAK,KAAK,UACrC,cAAe,EACf,aAAc,EACd,gBAAiB,KAAK,UAAU,GAChC,UAAW,IAAM,EACjB,aAAc,QACX,KAAK,WAAW,KAAK,OAAQ,EAAK,KAAK,WACvC,KAAK,UAAU,KAAK,OAAQ,EAAU,EAAK,KAAK,SAAU,IAAM,IAE5D,UAAA,EACX,SAAU,EAAK,KAAK,SAEnB,KAAA,YAAY,EAAU,EAAU,GAEjC,IAAA,EAAO,EAAS,QAAQ,mBACxB,aAAgB,UAAU,IAC1B,IAAA,EAAQ,EAAS,QAAQ,kBAGtB,OAFH,aAAiB,UAAU,IAExB,EAGX,WAAW,EAA4B,GAC/B,IAAA,EAAU,YAAY,OAAO,QAAQ,GACrC,EAAM,GACL,IAAA,IAAI,KAAO,EACR,GAAa,aAAb,EAAI,KAAqB,CACrB,IAAA,EAAM,EAAK,QAAQ,EAAI,MACvB,aAAe,WACf,EAAI,EAAI,MAAQ,GAIrB,OADP,OAAO,OAAO,EAAK,KAAK,MAAM,IAAM,IAC7B,EAGX,QAAQ,EAA4B,GAC5B,IAAA,EAAU,YAAY,OAAO,QAAQ,GACrC,EAAI,GACH,IAAA,IAAI,KAAO,EACR,GAAa,WAAb,EAAI,KAAmB,CACnB,IAAA,EAAM,EAAK,QAAQ,EAAI,MAC3B,EAAE,EAAI,MAAQ,KAAK,UACf,aAAe,YAAY,OAAS,EAAI,WAAQ,GAGrD,OAAA,EAGX,YAAY,EAAgC,EAAkB,GACrD,IAAA,IAAI,KAAK,EAAS,CACf,IAAA,EAAM,EAAS,QAAQ,GACvB,aAAe,YAAY,SAC3B,EAAQ,GAAG,MAAQ,EAAW,EAAI,QAQ9C,UAAU,EAA4B,EAAkB,EAA4B,GAC5E,IAAA,EAAU,YAAY,OAAO,QAAQ,GACrC,EAAU,YAAY,OAAO,QAAQ,GACrC,EAAW,GAAoB,IAAY,IAAW,QAAQ,GAC9D,EAAI,GACH,IAAA,IAAI,KAAO,EACR,GAAa,aAAb,EAAI,MAAuB,EAAI,KAAK,WAAW,MAAO,CAClD,IACA,EADA,EAAO,EAAI,KAAK,MAAM,IAEtB,EAAM,EAAK,QAAQ,IACnB,EAAE,EAAI,MAAQ,KAAM,IACf,EAAM,EAAQ,KAAM,GAAQ,EAAI,MAAQ,MAC7C,EAAE,EAAI,MAAQ,KAAM,EAAQ,KAGjC,OAAA,EAGX,UAAU,EAAe,YACd,OAAA,IAAI,YAAY,OAAO,CAAC,MAAM,MAAO,SAAQ,GAAO,KAjHvE,CAAU,IAAA,QAAA,eAAA,EAAc;;ACfxB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,QAAA,EA1EA,MAAM,EAAY,CACd,SAAU,EACV,SAAU,EACV,OAAQ,EACR,OAAQ,MACR,QAAS,MACT,QAAS,MACT,QAAS,KACT,QAAS,MACT,QAAS,KACT,QAAS,MACT,SAAU,MACV,QAAS,IACT,OAAQ,KACR,SAAU,OACV,QAAS,KACT,SAAU,EACV,YAAa,QACb,WAAY,IACZ,OAAQ,IACR,QAAS,QACT,UAAW,QACX,WAAY,EACZ,QAAS,IACT,QAAS,IACT,QAAS,IACT,QAAS,GACT,QAAS,GACT,QAAS,GACT,QAAS,GACT,QAAS,EACT,QAAS,EACT,QAAS,EACT,QAAS,EACT,QAAS,EACT,KAAM,EACN,KAAM,EACN,KAAM,EACN,KAAM,EACN,oBAAqB,EACrB,cAAe,GAGnB,MAAM,EAAN,cAEI,KAAA,UAAY,EAEZ,QAAQ,GACE,MAAA,EAAI,EACN,IAAA,EAAM,GAoBH,OAdP,GAHQ,CAAG,CAAA,EAAE,SAAU,IAAM,CAAA,EAAE,SAAU,IAAM,CAAA,EAAE,SAAU,IAChD,CAAA,EAAE,SAAU,IAAM,CAAA,EAAE,SAAU,IAAM,CAAA,EAAE,UAAW,IACjD,CAAA,EAAE,SAAU,KACd,EAAO,EAAE,SAAW,IAE7B,GAAQ,EAAO,EAAE,QAAW,IAAM,IAClC,GAAQ,EAAO,EAAE,QAAW,IAAM,IAClC,GAAQ,EAAO,EAAE,QAAW,IAAM,IAElC,GAAQ,EAAO,EAAE,QAAW,IAAM,IAClC,GAAQ,EAAO,EAAE,QAAW,IAAM,IAClC,GAAQ,EAAO,EAAE,QAAW,IAAM,IAElC,GAAQ,EAAO,EAAE,QAAW,IAAM,IAClC,GAAQ,EAAO,EAAE,QAAW,IAAM,IAClC,GAAQ,EAAO,EAAE,QAAW,IAAM,KAO1C,MAAM,EAAK,IAAI,EAAf,QAAA,GAAA;;ACgbC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,QAAA,UAAA,EA3fD,IAAA,EAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,SACA,EAAA,QAAA,UAEA,EAAA,EAAA,QAAA,YAEA,EAAA,QAAA,UACA,EAAA,QAAA,WACA,EAAA,QAAA,UACA,EAAA,QAAA,QACA,EAAA,EAAA,QAAA,+BAifC,SAAA,IAAA,GAAA,mBAAA,QAAA,OAAA,KAAA,IAAA,EAAA,IAAA,QAAA,OAAA,EAAA,WAAA,OAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,GAAA,OAAA,GAAA,iBAAA,GAAA,mBAAA,EAAA,MAAA,CAAA,QAAA,GAAA,IAAA,EAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,OAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,KAAA,IAAA,EAAA,KAAA,EAAA,KAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EA7eD,MAAM,UAAa,EAAnB,aAkBI,YAAY,EAAgB,EAAkB,IAC1C,QACK,KAAA,KAAO,EACP,KAAA,KAAO,EAEP,KAAA,OAAS,IAAI,EACb,KAAA,OAAO,GAAG,SAAU,GAAM,KAAK,KAAK,UAAW,CAChD,KAAM,SACN,KAAM,KAGL,KAAA,OAAS,IAAI,EAAJ,YAAgB,CAAC,KAAM,IAAI,YAAY,IAAI,EAAuB,QAC3E,KAAA,SAAW,IAAI,IAEf,KAAA,KAAO,IAAI,EAAJ,cAAkB,GAEzB,KAAA,QAAU,GAGnB,OACU,MAAA,EAAQ,KAAK,QACb,EAAa,CACT,KAAM,EACN,OAAQ,EACR,SAAU,EAAU,wBACpB,KAAM,IACN,SAAU,KAEf,KAAA,KAAK,KAAK,OAAO,IAAI,EAAU,GAC/B,KAAA,KAAK,KAAK,OAAO,IAAI,EAAO,GAE5B,KAAA,KAAK,OAAO,GAAG,cAAc,YAAa,IAG/C,aAYO,OAXD,EAAA,QAAA,MAAQ,KAAK,MACd,KAAA,OAAO,MAAQ,KAAK,MAEpB,KAAK,YACD,KAAA,UAAY,IAAI,YAAY,MAAM,CACnC,QAAS,KAAK,KAAK,aAAe,KAClC,QAAS,aAKV,EAAA,EAAA,EAAA,GAAA,EADP,SAAA,GAAA,CAEI,0BAA2B,KAAK,WAC7B,EAAQ,KAAM,CACb,QAAS,SAAU,WAAY,UAAW,UAC1C,mBAAoB,+BACpB,SAAU,UAAW,YAAa,aAClC,QAAS,iBAAkB,OAAQ,QAAS,SAC5C,UAAW,aAAc,YAAa,YACtC,cAAe,iBAChB,KAAK,KAAK,QAIjB,aAEO,OAAA,EAAA,EAAA,GAAA,EAAQ,KAAM,CAAC,QAAS,QAAS,QAChC,eAAgB,eACjB,KAAK,KAAK,QAIjB,WACW,OAAA,EAAA,EAAA,GAAA,EAAX,SAAA,GAAA,CACI,QAAS,CAAC,KAAgB,KACX,KAAP,IAAY,EAAM,KAAK,KAAK,IAAI,KAC7B,EAAK,QAAA,QAAQ,GAAO,OAAQ,MAK3C,UAEO,OADF,KAAA,KAAK,KAAK,gBACR,KAAK,KAAK,KAAK,KAGtB,aACO,OAAA,EAAO,OAAA,KAAK,KAAK,KAAK,KAAK,OAAO,QAM7C,QACS,IAAA,IAAI,EAAe,EAAI,KAAK,QAAQ,MAAO,MAOpD,MAAM,GACE,IAAA,EAAI,KAAK,eAAe,GAAK,SAAS,SACrC,KAAA,KAAK,IAAI,IAAM,EAGxB,OAAO,EAAU,GAGT,GAFC,KAAA,MAAM,SAAU,EAAK,GAEd,IAAR,EAAW,KAAM,6BACjB,IAAA,GAAO,KAAK,KAAK,IAAI,KAAO,IAAM,KAClC,GAAA,EAAI,OAAS,EAAI,KAAM,CAAC,MAAO,EAAG,KAAM,UAErC,OADF,KAAA,OAAO,MAAM,EAAK,GAChB,EAGX,aAAa,GACL,IAAA,EAAM,KAAK,KAAK,KAAK,GAAK,KACvB,OAAA,KAAK,kBAAkB,EAAK,GAGvC,UAAU,GAEC,OAAA,KAAK,kBADF,SACyB,GAGvC,UACW,OAAA,EAGX,MAAM,GACE,IAAA,EAAM,KAAK,eAAe,GACzB,KAAA,KAAK,MAAM,GAOpB,SAAS,EAAgB,GACjB,IAAA,EAAM,KAAK,eAAe,GAE1B,GAAkB,IAAlB,EAAqB,KAAM,+BAC3B,IAAA,EAAM,EAAK,QAAA,QAAQ,KAAK,KAAK,IAAI,IAAK,EAAI,SAAS,UAAY,KAC/D,GAAA,EAAI,OAAS,EAAU,KAAM,CAAC,MAAO,EAAG,KAAM,UAE3C,OADF,KAAA,OAAO,MAAM,EAAK,GAChB,EAGX,MAAM,EAAgB,GACd,IAAA,EAAU,KAAK,OAAO,KAAK,KAAK,KAAK,OAAO,QACzC,OAAA,KAAK,IAAI,EAAO,EAAU,GAGrC,MAAM,EAAS,EAAY,GAClB,KAAA,MAAM,QAAS,EAAI,EAAO,GAC3B,IAAA,EAAO,KAAK,KAAK,KAAK,OAAO,IAAI,GACjC,IAAC,EAAM,OAAQ,EAEf,IAAA,EAAQ,KAAK,MAAM,GAEhB,OADF,KAAA,KAAK,KAAK,OAAO,IAAI,EAAO,KAAK,QAAQ,IACvC,EAGX,QAAQ,GAEA,IAAA,EAAU,KAAK,KAAK,OAAO,OAAO,SAAS,IAAK,KAEhD,EAAa,KAAK,KAAK,OAAO,OAAO,IAElC,OADP,EAAW,GAAW,EAAW,EAAK,MAC/B,OAAO,OAAO,GAAI,EAAM,CAAC,KAAM,IAG1C,QAAQ,EAAW,GACX,IAAA,EAAM,EAAG,GAAA,QAAQ,GAAQ,KACxB,KAAA,OAAO,MAAM,EAAK,GAO3B,iBAAiB,EAAU,GAClB,KAAA,2BAA2B,MAAQ,MACnC,KAAA,IAAI,UAAU,EAAK,GACpB,IAAA,EAAO,KAAK,UAAU,GAAQ,EAAM,EACpC,IACO,OACC,IACO,OAAA,EAAK,GAEhB,MAAO,GAEC,GADC,KAAA,uBAAuB,KAAK,UAAU,QACvC,aAAa,GAAW,EAAE,KAAO,GAGjC,MAAM,EAFN,EAAM,EAAE,KAMhB,QACC,KAAA,MAAM,6BAInB,6BAA6B,EAAU,GAC5B,OAAA,KAAK,iBAAiB,EAAK,GAGtC,OAAO,GAEI,OADP,QAAQ,KAAK,SAAU,GAChB,EAGX,QAAQ,EAAU,GAER,MADD,KAAA,kBAAkB,MAAQ,KACzB,IAAI,EAAQ,EAAK,GAG3B,UAAU,EAAU,GAET,OADP,QAAQ,KAAK,YAAa,EAAK,GACxB,EAGX,WAAW,EAAU,GACZ,KAAA,QAAQ,EAAK,GAGtB,QACQ,IAAA,EAAM,KAAK,IAAI,KAAM,KAAK,UAAY,EAanC,OAZF,KAAA,SAAS,IAAI,GACb,KAAA,OAAU,CAAA,IACP,KAAA,aAAiB,GAQhB,MAAM,EARqB,CACxB,IAAA,EAAI,EACH,KAAA,MAAM,UAAW,EAAE,KAAM,EAAE,KAAK,IAAI,GAAK,EAAE,SAAS,WACpD,KAAA,KAAK,UAAW,CACjB,KAAM,QACN,KAAM,CAAC,IAAA,EAAK,MAAO,EAAG,IAAK,KAAK,KAAK,UAK1C,EAGX,eAAe,EAAS,EAAS,GACzB,IAAA,EAAO,KAAK,UAAU,GACtB,IACA,EAAK,GACD,KAAK,QAAQ,KAAK,OAAO,MAEjC,MAAO,GACC,KAAK,QAAQ,KAAK,OAAO,GAE5B,KAAA,OAAS,KACd,EAAK,GAGT,OAAO,EAAW,EAAW,GAEnB,MADD,KAAA,eAAe,MAAS,MAAS,MAChC,IAAI,EACN,KAAK,eAAe,GAAM,SAAS,SACnC,KAAK,gBAAgB,GACrB,KAAK,gBAAgB,IAG7B,YAAY,EAAU,EAAW,EAAmB,EACxC,EAAW,GACf,IAAA,EAAU,KAAK,eAAe,GAAM,SAAS,SAC5C,KAAA,qBAAqB,OAAS,OAAa,MAAiB,YAC7D,IAAA,EAAQ,IAAI,EACA,EACA,KAAK,gBAAgB,GACrB,KAAK,gBAAgB,IACjC,EAAS,KAAK,IAAI,KAAM,KAAK,UAAY,EAOtC,OALF,KAAA,KAAK,UAAW,CACjB,KAAM,QACN,KAAM,CAAC,IAAK,EAAQ,MAAA,EAAO,IAAK,KAAK,KAAK,OAEzC,KAAA,IAAI,UAAU,EAAK,GAAQ,GACzB,EAGX,KAAK,GAEM,OADF,KAAA,cAAc,MACZ,KAAK,SAAS,GAGzB,MAAM,EAAe,EAAc,GAExB,OADF,KAAA,eAAe,MAAa,MAAY,MACtC,KAAK,SAAS,GAGzB,SAAS,GACD,IAAA,EAAM,KAAK,OAAO,UAClB,EAAW,KAAK,OAAO,UAIpB,OAHF,KAAA,cAAc,KACF,IAAb,GACA,KAAK,IAAI,UAAU,EAAU,GAAY,GAAG,GACzC,EAKX,eAAe,GACP,GAAQ,GAAR,EAAW,OAAO,KAClB,IAAA,EAAM,EAAO,OAAA,KAAK,KAAK,KAAK,KAAK,OAAO,QACrC,OAAA,EAAI,MAAM,EAAM,EAAI,QAAQ,EAAG,IAG1C,gBAAgB,GACR,GAAQ,GAAR,EAAW,OAAO,KAClB,IAAA,EAAI,GACF,OAAG,CACD,IAAA,EAAI,KAAK,IAAI,UAAU,GAAM,GAC7B,GAAM,IAAN,EAAS,MACb,EAAE,KAAK,KAAK,eAAe,IAC3B,GAAQ,EAEL,OAAA,EAGX,kBAAkB,EAAW,GAKlB,OAJF,KAAA,QAAQ,KAAK,KACV,IAAA,EAAM,KAAK,IAAI,UAAU,GAAM,GAC9B,KAAA,OAAO,MAAM,EAAG,KAElB,EAAE,OAOb,UAAU,GACF,IAAA,EAAO,KAAK,UAAU,IACtB,KAAK,IAAI,UAAU,EAAQ,IAAI,IAC5B,MAAA,IAAI,IAAc,EAAK,KAAU,GAO5C,QAAQ,GACC,KAAA,OAAO,KAAK,GAGrB,aACS,KAAA,OAAO,UAGhB,UAAU,EAAa,EAAU,GACxB,KAAA,MAAM,YAAa,EAAQ,EAAK,GACjC,IAAA,EAAa,KAAK,IAAI,UAAU,GAAK,GACrC,EAAgB,KAAK,UAAU,IAAI,GAClC,KAAA,MAAM,UAAQ,EAAY,GAC1B,KAAA,OAAO,SAAS,GAAU,EACnB,GAAR,GACK,KAAA,IAAI,UAAU,EAAM,GAIjC,aAMA,cACW,OAAA,MA6Gd,QAAA,KAAA,EAxGD,MAAM,GAAY,IAEZ,EAAa,CACf,KAAM,EAAU,WAChB,WAAY,EAAU,YAQ1B,MAAM,UAAqB,EAA3B,aAQI,YAAY,EAAyB,IACjC,QACK,KAAA,KAAO,EAAM,MAAQ,IAAI,WAAW,IAAI,EAAuB,EAAI,IACnE,KAAA,SAAW,MAAM,GAGnB,YAAK,GAAmC,OAAA,IAAI,EAAa,GAEhE,KACW,MAAA,CAAC,KAAM,KAAK,MAGvB,KAAK,IACM,EAAA,EAAA,SAAA,EAAI,GAAU,EAAS,GAC9B,QAAQ,IAAI,KAAK,KAAM,EAAG,GAC1B,QAAQ,IAAI,KAAK,KAAM,EAAQ,GAC/B,QAAQ,OAAO,KAAK,KAAM,EAAG,GAGjC,QAAQ,GAMG,OALF,KAAK,YAAW,KAAK,UAAY,IAAI,WAAW,IAErD,QAAQ,KAAK,KAAK,KAAM,EAAG,QAAQ,KAAK,KAAK,KAAM,IAE9C,KAAA,MAAM,IACH,EAGZ,MAAM,GACG,IAAA,IAAI,EAAI,EAAG,EAAI,EAAM,IAClB,IAAC,GAAW,EAAQ,SAAS,GAAI,CAC7B,IAAA,EAAI,KAAK,SAAS,GAClB,GAAK,KAAK,UAAU,GAAK,KAAK,KAAK,KAC9B,KAAA,MAAM,UAAW,GACtB,EAAE,IAED,KAAA,UAAU,GAAK,KAAK,KAAK,KAgD7C,QAAA,aAAA,EAzCD,MAAM,EAAW,IASX,EAAO,GAMb,MAAM,EAIF,YAAY,EAAc,EAAgB,GACjC,KAAA,KAAO,EACP,KAAA,KAAO,EACP,KAAA,KAAO,GAIpB,MAAM,EAGF,YAAY,EAAU,GACb,KAAA,IAAM,EACN,KAAA,IAAM,GAInB,MAAM,EAAqD,oBAArB,kBAChC,kBAAoB,YAE1B,SAAS,EAAQ,EAAe,GACrB,OAAA,EAAQ,OAAO,CAAC,EAAG,IACtB,OAAO,OAAO,EAAG,CAAE,CAAA,GAAI,EAAS,GAAG,KAAK,KAAa;;ACtf7D,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,UAAA,QAAA,YAAA,EAFA,MAAM,EAAS,OAAO,SAAW,OAAO,QAAQ,UAAY,OAAO,QAAQ,SAAS,KAEpF,QAAA,OAAA,EAAA,MAAM,EAA8B,iBAAX,QAA6D,mBAA/B,2BAAvD,QAAA,UAAA;;ACqCC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,QAAA,UAAA,QAAA,YAAA,EAzCD,IAAA,EAAA,QAAA,oBAIA,IAAI,EAAY,EAAa,EAE7B,GAmCC,QAAA,UAAA,EAAA,QAAA,YAAA,EAAA,QAAA,OAAA,EAnCG,EAAJ,UACI,QAAA,OAAA,EAAa,KAAK,OAClB,QAAA,YAAA,EAAc,KAAK,YACnB,QAAA,UAAA,EAAa,CAAA,GAAY,iBAAiB,UAAW,SAEpD,GAAI,EAAJ,OAAY,CACP,MAAA,EAAoB,QAAS,kBAG7B,MAAA,EAEF,YAAY,GACH,KAAA,OAAS,IAAI,EAAc,OAAO,GAE3C,iBAAiB,EAAmB,GAC3B,KAAA,OAAO,GAAG,EAAY,IACvB,EAAQ,CAAC,KAAM,MAGvB,YAAY,GACH,KAAA,OAAO,YAAY,GAErB,iBAAU,GACb,EAAc,WAAW,GAAG,UAAY,IACpC,EAAQ,CAAC,KAAM,MAGhB,mBAAY,GACf,EAAc,WAAW,YAAY,IAI7C,QAAA,OAAA,EAAa,EACb,QAAA,UAAA,EAAY,EAAc,UAC1B,QAAA,YAAA,EAAc,EAAc;;ACxChC,IAAIA,EAAY,KAChB,SAASC,IAKAD,OAJFA,IACHA,EAAYE,KAGPF,EAGT,SAASE,IAEH,IACI,MAAA,IAAIC,MACV,MAAOC,GACHC,IAAAA,GAAW,GAAKD,EAAIE,OAAOC,MAAM,iEACjCF,GAAAA,EACKG,OAAAA,EAAWH,EAAQ,IAIvB,MAAA,IAGT,SAASG,EAAWC,GACX,OAAC,GAAKA,GAAKC,QAAQ,uEAAwE,MAAQ,IAG5GC,QAAQT,aAAeD,EACvBU,QAAQH,WAAaA;;AC5BrB,IAAIN,EAAeU,QAAQ,gBAAgBV,aAE3C,SAASW,EAAgBC,GAClBC,MAAMC,QAAQF,KACjBA,EAAU,CAACA,IAGTG,IAAAA,EAAKH,EAAQA,EAAQI,OAAS,GAE9B,IACKC,OAAAA,QAAQC,QAAQR,QAAQK,IAC/B,MAAOb,GACHA,GAAa,qBAAbA,EAAIiB,KACC,OAAA,IAAIC,EAAY,SAAUF,EAASG,GACxCC,EAAYV,EAAQW,MAAM,GAAI,IAC3BC,KAAK,WACGd,OAAAA,QAAQK,KAEhBS,KAAKN,EAASG,KAIfnB,MAAAA,GAIV,SAASoB,EAAYV,GACZK,OAAAA,QAAQQ,IAAIb,EAAQc,IAAIC,IAGjC,IAAIC,EAAgB,GACpB,SAASC,EAAqBC,EAAMC,GAClCH,EAAcE,GAAQC,EAGxBC,OAAOvB,QAAUA,QAAUE,EAC3BF,QAAQwB,KAAOX,EACfb,QAAQyB,SAAWL,EAEnB,IAAIjB,EAAU,GACd,SAASe,EAAWQ,GACdpB,IAAAA,EAMAH,GALAC,MAAMC,QAAQqB,KAChBpB,EAAKoB,EAAO,GACZA,EAASA,EAAO,IAGdvB,EAAQuB,GACHvB,OAAAA,EAAQuB,GAGbL,IAAAA,GAAQK,EAAOC,UAAUD,EAAOE,YAAY,KAAO,EAAGF,EAAOnB,SAAWmB,GAAQG,cAChFC,EAAeX,EAAcE,GAC7BS,OAAAA,EACK3B,EAAQuB,GAAUI,EAAavC,IAAiBmC,GACpDX,KAAK,SAAUgB,GAKPA,OAJHA,GACFR,OAAOG,OAAOD,SAASnB,EAAIyB,GAGtBA,IACNC,MAAM,SAASC,GAGVA,aAFC9B,EAAQuB,GAETO,SAXRH,EAgBN,SAASnB,EAAYuB,GACdA,KAAAA,SAAWA,EACXC,KAAAA,QAAU,KAGjBxB,EAAYyB,UAAUrB,KAAO,SAAUsB,EAAWC,GAEzC,OADc,OAAjB,KAAKH,UAAkB,KAAKA,QAAU,IAAI3B,QAAQ,KAAK0B,WACpD,KAAKC,QAAQpB,KAAKsB,EAAWC,IAGtC3B,EAAYyB,UAAUJ,MAAQ,SAAUM,GAE/B,OADc,OAAjB,KAAKH,UAAkB,KAAKA,QAAU,IAAI3B,QAAQ,KAAK0B,WACpD,KAAKC,QAAQH,MAAMM;;ACqF3B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,EAtKD,IAyJK,EAzJL,EAAA,QAAA,UAKA,MAAM,UAAY,EAAlB,aASI,YAAY,GACR,QACK,KAAA,KAAO,EACP,KAAA,IAAM,GACN,KAAA,SAAW,EACX,KAAA,QAAU,CACX,MAAO,CAAC,IAAO,EAAK,EAAG,IACvB,IAAK,KAAK,iBAGT,KAAA,KAAK,GAAG,aAAc,IACnB,KAAK,IAAI,SAAS,EAAG,KACrB,KAAK,KAAK,OAAQ,EAAG,QAGxB,KAAA,MAAQ,SAGjB,KAAwB,MAAA,CAAC,QAAS,CAAC,IAAK,KAAK,QAAQ,MAErD,QAAQ,GAEC,KAAA,KAAK,KAAK,OAAO,IAAI,GAAI,SAAW,EACpC,KAAA,KAAK,KAAK,OAAO,IAAI,GAAI,OAAO,OAAS,OAAO,IAGzD,MAAM,GACG,KAAA,KAAK,MAAM,MAAM,GAO1B,oBAAoB,EAAY,GAMrB,OALF,KAAA,0BAA0B,MAAO,QAC3B,IAAP,IACK,KAAA,SAAW,EACX,KAAA,KAAK,MAAM,WAAqB,EAAR,IAE1B,EAGX,cAAc,EAAY,GAClB,IAAA,EAAM,KAAK,KAAK,KAAK,WAAW,cAAc,EAAI,GAK/C,OAJI,IAAP,GAEK,KAAA,KAAK,KAAK,IAAI,UAAU,EAAS,EAAG,KAAK,UAAU,GAErD,EAGX,gBACQ,IAAA,EAAM,IAAI,YAAY,IAAI,kBAAkB,IAGzC,OAFP,EAAI,GAAK,GACT,EAAI,GAAK,GACF,EAGP,qBACO,OAAA,EAAQ,KAAM,CAAC,gBAAiB,wBAGvC,aACO,OAAA,EAAQ,KAAM,CAAC,YAAa,YAAa,YAGhD,aACO,OAAA,EAAQ,KAAM,CAAC,cAO1B,UAAU,EAAS,GACV,KAAA,mBAAmB,MAAO,MAC3B,IAAA,EAAM,KAAK,KAAK,KAAK,IASlB,OARF,KAAA,QAAQ,MAAM,QAAQ,CAAC,EAAI,KAC5B,EAAI,UAAU,EAAY,EAAI,EAAG,GAAI,KAGzC,EAAI,SAAS,EAAa,GAAS,EAAI,EAAG,GAC1C,EAAI,SAAS,EAAa,GAAS,EAAI,EAAG,GAGnC,EAGX,UAAU,EAAS,EAAW,GACrB,KAAA,mBAAmB,MAAO,MAAS,MACpC,IAAA,EAAM,KAAK,KAAK,KAAK,IACrB,EAAQ,EAAM,GAAG,IAAI,GAAK,EAAI,UAAU,EAAY,EAAI,GAAG,IAC3D,EAAK,EAAM,IAAI,IAAI,GAAK,EAAI,SAAS,EAAa,GAAS,EAAI,IAQ5D,OAPF,KAAA,YAAY,EAAM,IAAI,GAAK,IAAI,EAAE,SAAS,IAAI,KAAK,WAAW,MAC9D,KAAA,QAAQ,MAAQ,EAChB,KAAA,KAAK,MAAM,SAAW,EAAG,GAAK,EAC9B,KAAA,KAAK,KAAK,KAAK,UAAW,CAC3B,KAAM,YACN,KAAM,CAAC,GAAA,EAAI,KAAA,EAAM,MAAA,KAEd,EAGX,QAAQ,EAAS,GAEN,OADF,KAAA,qBAAqB,KAAK,KAAK,KAAK,eAAe,QACjD,EAGX,UAAU,EAAS,EAAc,GAEzB,GADJ,QAAQ,KAAK,YAAa,EAAI,EAAS,GAC7B,GAAN,EAAS,CACL,IAAA,EAAM,KAAK,KAAK,KAAK,IAAK,EAAM,KAAK,QAAQ,IAEzC,OAAA,GACH,KAAA,EAAU,WACN,IAAA,IAAI,EAAI,EAAG,EAAI,EAAI,OAAQ,IAC5B,EAAI,UAAU,EAAM,EAAI,EAAG,EAAI,IAAI,GACvC,MACC,KAAA,EAAU,WACP,IAAA,EAAU,EAAI,IAAI,CAAC,EAAE,IAAM,EAAI,UAAU,EAAM,EAAI,IAClD,KAAA,KAAK,KAAK,KAAK,UAAW,CAC3B,KAAM,YACN,KAAM,CAAC,GAAA,EAAI,QAAA,EAAS,IAAK,QAsB7C,SAAS,EAAQ,EAAe,GACrB,OAAA,EAAQ,OAAO,CAAC,EAAG,IACtB,OAAO,OAAO,EAAG,CAAE,CAAA,GAAI,EAAS,GAAG,KAAK,KAAa,IAG7D,SAAS,EAAM,GACJ,MAAA,IAAI,MAAM,GAAG,QACvB,QAAA,IAAA,EAbD,SAAK,GACD,EAAA,EAAA,QAAA,GAAA,UACA,EAAA,EAAA,WAAA,OAAA,aACA,EAAA,EAAA,WAAA,OAAA,aAHJ,CAAK,IAAA,EAAS;;ACpIb,aAlBD,IAAI,EAUA,EAQH,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,WAAA,QAAA,gBAAA,EAAA,QAAA,WAAA,EAhB0B,oBAAhB,YACP,QAAA,WAAA,EAAc,CAAA,IACV,IAAI,aAAc,OAAO,IAG7B,QAAA,WAAA,EAAc,CAAA,GAAiB,OAAO,KAAK,IAW9C,QAAA,WAAA,EAN0B,oBAAhB,YACP,QAAA,WAAA,EAAc,CAAA,IACV,IAAI,aAAc,OAAO,IAG7B,QAAA,WAAA,EAAc,CAAA,GAAqB,OAAO,KAAK,GAAM,SAAS;;AC6QrB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,QAAA,mBAAA,EAjS7C,IAAA,EAAA,QAAA,UACA,EAAA,EAAA,QAAA,WACA,EAAA,QAAA,gBACA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,6BACA,EAAA,QAAA,SAEA,EAAA,QAAA,aACA,EAAA,QAAA,cACA,EAAA,QAAA,eAEA,EAAA,QAAA,mBACA,EAAA,QAAA,iBAqR6C,SAAA,IAAA,GAAA,mBAAA,QAAA,OAAA,KAAA,IAAA,EAAA,IAAA,QAAA,OAAA,EAAA,WAAA,OAAA,GAAA,EAAA,SAAA,EAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,GAAA,OAAA,GAAA,iBAAA,GAAA,mBAAA,EAAA,MAAA,CAAA,QAAA,GAAA,IAAA,EAAA,IAAA,GAAA,GAAA,EAAA,IAAA,GAAA,OAAA,EAAA,IAAA,GAAA,IAAA,EAAA,GAAA,EAAA,OAAA,gBAAA,OAAA,yBAAA,IAAA,IAAA,KAAA,EAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,GAAA,KAAA,IAAA,EAAA,KAAA,EAAA,KAAA,OAAA,eAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAlR7C,EAAK,KAAA,gBACD,EAAY,UAAA,QAAQ,qCAAqC,QAC7C,QAAQ,kCAAkC,QAI1D,MAAM,UAAiB,EAAvB,aAqBI,YAAY,EAAwB,IAChC,QACK,KAAA,KAAO,EAAO,OAAO,OAAO,GAAI,EAAU,GAG1C,KAAA,MAAQ,EAAK,MAAQ,IAAI,EAAJ,cAAsB,KAC3C,KAAA,OAAS,IAAI,EAAJ,OAET,KAAA,iBAEA,KAAA,KAAO,IAAI,EAAJ,KAAS,MAChB,KAAA,IAAM,EAAK,IAAM,IAAI,EAAJ,IAAQ,MAAQ,KACjC,KAAA,QAA6B,IAAnB,EAAK,UAAuB,IAAI,IAAQ,KAElD,KAAA,OAGD,KAAK,KAAK,OACL,KAAA,MAAQ,KAAK,cACb,KAAA,MAAQ,KAAK,eAGb,KAAA,MAAQ,KAAK,MAAQ,SAE1B,KAAK,MACL,KAAK,IAAI,MAAQ,KAAI,IAAM,KAAK,SAAS,KACxC,KAAA,KAAK,MAAQ,KAAI,IAAM,KAAK,SAAS,IAG9C,OACS,KAAA,KAAO,CAAC,KACR,KAAA,IAAM,KAAK,aAGX,KAAA,KAAO,IAAI,EAAJ,KAAA,EAAA,CACR,KAAM,KAAK,KACX,IAAK,KAAK,IACV,SACO,EAAA,EAAA,GAAA,EAAK,KAAA,iBADJ,GAAA,CAEJ,KAAM,IAAgB,MAAA,IAAI,EAAc,IACxC,GAAI,KAAK,OAAO,GAChB,KAAM,KAAK,KAAK,OAEpB,SAAU,CAAM,IAAA,IAAU,IAAA,MACvB,KAAK,oBAEP,KAAA,QAAS,EAET,KAAA,gBACA,KAAA,KAAK,OAGN,IAAA,EAAM,KAAK,KAAK,IAChB,GAAA,EAAK,CACD,IAAA,EAAqB,iBAAP,EAAmB,CAAC,GACb,kBAAP,EAAoB,CAAC,EAAE,EAAE,GAAK,EAC3C,KAAA,IAAI,IAAM,EACV,IAAA,IAAI,KAAM,EACX,KAAK,IAAI,QAAQ,IAI7B,QACQ,KAAK,OAAO,KAAK,MAAM,QACtB,KAAA,OAGH,YAAM,EAAiB,EAAiB,GACtC,KAAK,QAAQ,KAAK,QAElB,GAAM,KAAK,KAAK,OAAO,EAAG,EAAA,KAAa,GACvC,GAAM,OAAO,OAAO,KAAK,IAAK,GAG9B,IAAA,QAAiB,KAAK,aAAa,GACnC,QAAmB,YAAY,YAAY,EACvC,KAAK,WAAW,IAEnB,KAAA,KAAO,CAAC,OAAQ,EAAU,SAAU,GAGrC,IAEO,OADF,KAAA,KAAK,MAAM,KAAK,KAAK,UACnB,EAEX,MAAO,GACC,GAAA,aAAa,EAAe,OAAO,EAAE,KACpC,MAAM,EAEP,QACC,KAAA,QAAS,GAIlB,SAAmB,OAAA,KAAK,OAAO,GAE7B,YAAM,GACJ,GAAiB,oBAAV,MAAuB,CACxB,MAAA,QAAiB,MAAM,GACtB,OAAA,IAAI,iBAAiB,EAAS,eAI9B,OAAA,EADI,QAAQ,MACL,cAAc,GAI9B,mBAAa,GACR,OAAA,EAAa,KAAK,OAAQ,EAAK,MAAA,IAC9B,IAAA,QAAc,KAAK,MAAM,GAEtB,OADP,QAAc,EAAY,gBAAgB,GACnC,YAAY,QAAQ,KAInC,WAAW,GAGH,IAAA,EAAK,IAAI,IAAe,EAAU,GACjC,IAAA,IAAI,KAAO,YAAY,OAAO,QAAQ,GACnC,EAAI,OAAO,WAAW,UAA2B,aAAf,EAAI,QACtC,EAAG,IAAI,EAAI,QAEd,IAAA,IAAI,KAAM,EACX,EAAQ,GAAM,KAAK,KAAK,WAIrB,OAFP,EAAO,SAAmB,EAAA,EAAA,GAAA,KAAK,KAAK,QAAY,KAAK,IAAM,KAAK,IAAI,OAAS,IAC7E,EAAO,IAAc,EAAA,EAAA,GAAA,KAAK,KAAK,QAAY,KAAK,IAAM,KAAK,IAAI,OAAS,IACjE,EAOX,QACW,MAAA,CACH,MAAO,KAAK,MAAM,KAClB,IAAK,KAAK,IAAI,KACd,OAAQ,KAAK,KAAK,OAAO,KACzB,OAAQ,KAAK,KAAK,OAAO,MAIjC,UAAU,EAAY,GAEX,OADF,KAAA,KAAK,aAAc,CAAC,GAAI,EAAI,KAAM,IAChC,EAAO,OAMlB,aACW,OAAA,KAAK,KAAK,IAAM,OAAO,OAAO,GAAI,KAAK,KAAK,KAC5B,KAAK,aAGhC,aACW,MAAA,CAAC,KAAM,OAAQ,IAAK,SAG/B,kBACQ,IAAA,EAAI,KAAK,KAEN,MAAA,CAAC,cAAe,EAAE,OAAS,EAAE,MAAM,UAG9C,gBACQ,IAAA,EAAS,KAAK,OAAO,OAErB,KAAE,EAAO,IAAI,IAAM,EAAO,IAAI,IAAM,EAAO,IAAI,IAAK,CAEpD,EAAO,YAAc,CAAC,EAAG,EAAG,GACtB,MAAA,EAAQ,EAAO,SAAS,cAAe,KACvC,EAAQ,EAAO,SAAS,cAAe,KACvC,EAAO,EAAO,SAAS,aAAc,MACpC,EAAA,EAAA,SAAQ,GAAR,GAAsB,GAAT,GAAuB,GAAT,GAGlC,KAAK,QACL,EAAO,IAAI,GAAG,KAAO,KAAK,MAAM,KAAK,KAAK,KAAK,QACnD,EAAO,IAAI,GAAG,MAAQ,CAAA,GAAK,KAAK,UAAU,EAAG,IAC7C,EAAO,IAAI,GAAG,MAAQ,CAAA,GAAK,KAAK,UAAU,EAAG,IAGjD,QAAQ,GACJ,EAAO,SAAS,KAAK,OAAO,OAAO,UAC9B,KAAA,OAAO,OAAS,EAChB,KAAA,OAAO,IAAK,EAAmB,EAAA,oBAAA,GAE/B,KAAA,OAMT,iBACS,KAAA,OAAO,GAAG,UAAU,SACpB,KAAA,OAAO,GAAG,UAAU,QAG7B,cACY,OAAA,OAAO,QACV,IAAG,IAAc,KAAK,UAAU,GAAG,EAAW,EAAA,YAAA,EAAK,KAAK,KAAK,OAC9D,QAAQ,IAGhB,cACY,OAAA,OAAO,QACV,GAAqB,KAAK,UAAU,EAAG,GACvC,GAAqB,QAAQ,KAAK,UAAW,GAAM,EAAW,EAAA,YAAA,KAqC9B,QAAA,SAAA,EArB7C,MAAM,EAA4B,CAAC,OAAO,GAG1C,SAAS,EAAc,EAAkB,EAAM,GACvC,IAAA,EAAI,EAAM,IAAI,GAKX,OAJF,IACD,EAAI,EAAE,GACN,EAAM,IAAI,EAAG,IAEV,EAGX,SAAS,EAAmB,EAAkB,EAAM,GACzC,OAAA,EAAQ,EAAQ,EAAO,EAAG,GAAK,EAAE,GAQtC,MAAO,EAET,YAAY,GAEH,KAAA,KAAO,GAJyB,QAAA,cAAA;;ACjLR,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,QAAA,cAAA,QAAA,iBAAA,EAhHrC,IAAA,EAAA,QAAA,UAEA,EAAA,QAAA,aAEA,EAAA,QAAA,eAEA,EAAA,QAAA,sBACA,EAAA,QAAA,gBAyGqC,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAnGrC,MAAe,UAAoB,EAAnC,aAcI,YAAY,GACR,QACK,KAAA,KAAO,EAER,KAAK,eACA,KAAA,OAAS,IAAI,EAAJ,sBAA0B,IAAI,mBAEpB,oBAAZ,SAA2B,QAAQ,QAC/C,QAAQ,MAAM,GAAG,OAAQ,GAAO,KAAK,UAAU,MAAM,IAChD,KAAA,OAAc,QAAQ,QAG1B,KAAA,GAAG,OAAQ,IAAM,KAAK,QAAS,GAKxC,UACQ,IAAA,EAA0B,EAEvB,OAAA,IAAI,QAAQ,CAAC,EAAS,KACpB,KAAA,GAAG,QAAS,EAAQ,CAAA,GAAa,EAAO,KACxC,KAAA,GAAG,OAAQ,EAAS,CAAA,GAAsB,EAAQ,OACxD,QAAQ,KACF,KAAA,eAAe,QAAS,GACxB,KAAA,eAAe,OAAQ,KAIpC,QACS,KAAA,QAAS,EACT,KAAA,UAAU,QACV,KAAA,eAGT,eACQ,MAA6B,oBAAtB,oBACF,KAAA,MAAQ,IAAI,EAAJ,sBAA0B,IAAI,mBACtC,KAAA,MAAM,GAAG,OAAQ,GAAS,KAAK,UAAU,MAAM,IAC/C,KAAA,MAAM,GAAG,MAAO,IAAM,KAAK,UAAU,QACnC,IA6CkB,QAAA,YAAA,EAjCrC,MAAM,UAAsB,EAIxB,YAAY,EAAc,EAA4B,IAC5C,MAAA,GACD,KAAA,OAAS,IAAI,EAAJ,OAAW,wCACpB,KAAA,OAAO,iBAAiB,UAAW,IAChC,EAAG,KAAK,QAAQ,KAAK,UAAY,EAAc,cAAA,KAAK,EAAG,KAAK,QAC5D,EAAG,KAAK,MAAQ,KAAK,IAAM,EAAG,KAAK,KACnC,EAAG,KAAK,SAAQ,KAAK,OAAS,EAAa,aAAA,KAAK,EAAG,KAAK,SACxD,EAAG,KAAK,SAAQ,KAAK,OAAS,EAAY,YAAA,KAAK,EAAG,KAAK,SACvD,EAAG,KAAK,IAAQ,KAAK,OAAO,MAAM,EAAG,KAAK,MAE1C,EAAG,KAAK,OAAQ,KAAK,KAAK,EAAG,KAAK,MAAO,EAAG,KAAK,IAAK,KAG1D,GAAM,KAAK,KAAK,GAGxB,QAAQ,GAEG,OADF,KAAA,OAAO,YAAY,CAAC,OAAQ,EAAO,OACjC,KAGX,KAAK,EAAc,GACX,KAAK,QAAQ,KAAK,QAClB,IAAM,KAAK,KAAK,KAAO,GACtB,KAAA,OAAO,YAAY,CAAC,KAAM,EAAM,KAAM,KAAK,QAKnB,QAAA,cAAA,EAArC,MAAM,UAAoB,EAItB,YAAY,EAAc,EAA4B,IAC5C,MAAA,GACD,KAAA,KAAK,GAGR,WAAK,EAAc,GACf,MAAA,SAAC,SAAkB,QAAO,iBAAP,CAAO,QAAA,QAAA,WAE3B,KAAA,KAAO,IAAI,EAAJ,EAAA,CAAc,KAAA,GAAS,KAAK,OACnC,KAAA,KAAK,GAAG,aAAc,GAAM,QAAQ,OAAO,MAAM,EAAG,OACrD,IACI,IAAA,QAAiB,KAAK,KAAK,MAAM,EAAM,KAAK,KAAK,MAChD,KAAA,KAAK,OAAQ,CAAC,KAAM,IAE7B,MAAO,GACE,KAAA,KAAK,QAAS,EAAK,KAnBC,QAAA,YAAA;;AC6ZrC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,YAAA,QAAA,kBAAA,EA7gBA,IA6gBU,EA7gBV,EAAA,QAAA,SACA,EAAA,QAAA,oBACA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,WA0gBA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAtgBA,MAAM,UAAqB,EAA3B,OAQI,YAAY,EAA2B,IAC/B,IAAA,EAQE,MAAA,CACF,KAPE,MACF,YAAY,EAAa,GACd,OAAA,IAAI,EAAiB,EAAK,EAAK,KAM1C,KAAM,IAEL,KAAA,IAAM,EAAY,KAAK,EAAM,KAElC,EAAM,KAGF,IAAA,EAAQ,KAAK,KAAK,UACtB,EAAM,IAAM,KAAM,EAAM,MAAQ,KAAK,KAEhC,KAAA,MAAQ,SAGV,YAAK,GACD,OAAA,IAAI,EAAa,GAG5B,KACW,MAAA,CAAC,IAAK,KAAK,IAAI,MAG1B,UAAU,EAAc,GAChB,IAAA,EAAK,KAAK,SAAS,EAAM,EAAM,GAAA,UAAU,SACzC,EAAyB,KAAK,IAAI,GAAI,KACtC,EAAO,KAAK,IAAI,UAAU,EAAI,QAClC,EAAK,IAAI,EAAK,GACd,EAAK,QAAQ,GACR,KAAA,UAAU,GAGnB,WAAW,EAA2B,EAAe,EAAuB,GAClE,MAAA,EAAyB,MAAM,WAAW,EAAQ,EAAM,EAAa,GAKpE,OAJH,GACK,KAAA,MAAM,iBAAkB,EAAO,IAAK,EAAM,EAAK,KAExD,EAAK,OACE,EAGX,WAAW,GACF,KAAA,MAAM,eAAgB,EAAK,OAAO,IAAK,EAAK,UAAW,EAAK,KAC7D,IAAA,EAAS,EAAK,OAAQ,EAAM,MAAM,WAAW,GAE1C,OADP,EAAO,OACA,EAGX,WAAW,GAAuB,EAAO,GACjC,IAAC,KAAK,IAAK,OAAyB,MAAM,WAAW,EAAa,GAChE,MAAA,EAAyB,IAAI,KAAK,MAAM,KAAK,KAAK,IAAI,QAAS,GAI9D,OAHH,GAAa,EAAK,iBACjB,KAAA,OAAO,EAAK,KAAO,EACxB,EAAK,OACE,EAGX,cAAc,GACH,OAAA,KAAK,OAAO,IAAQ,KAAK,WAAW,GAG/C,cAAc,EAAgB,GACrB,KAAA,YAAY,GAAI,GACjB,IAAA,EAAO,KAAK,SAAQ,EAAgB,EAAA,iBAAA,IAEpC,EAAQ,EAAO,MAAM,KAIlB,MAHS,IAAZ,EAAM,GAAU,EAAM,OAAO,EAAG,GAC/B,EAAM,OAAO,EAAG,EAAG,KACxB,EAAK,UAAU,YAAY,GACpB,EAMX,gBAAgB,GACR,IAAA,EAA6C,iBAApB,GAA+B,EAAgB,EAAA,iBAAA,GAAmB,EAE3F,EAAa,KAAK,KAEjB,IAAA,IAAI,EAAI,EAAG,EAAI,EAAM,QAAS,CACzB,MAAA,EAAO,EAAM,GACb,EAAQ,EAAK,SAAS,GACxB,IAAC,EAAO,OAAO,KAEb,MAAA,EAAO,EAAM,UACf,GAAA,EAAK,aAGD,GAFJ,EAAQ,EAAK,QAAQ,OAAO,EAAM,MAAM,EAAI,IAC5C,EAAI,EACa,MAAb,EAAM,GAAY,CAClB,EAAO,KAAK,KACZ,eAIJ,EAAO,EAEX,IAGG,OAAA,EAGX,WAAW,GACH,IAAA,EAAyB,IAAI,KAAK,MAAM,KAAK,GAE1C,OADF,KAAA,OAAO,GAAO,EACZ,GA2Yf,QAAA,aAAA,EAlYA,MAAM,EASF,YAAY,EAA0B,IAC7B,KAAA,IAAM,EAAM,KAAO,IAAI,kBAAkB,EAAM,MAAQ,GAAK,IAC5D,KAAA,UAAY,EAAM,WAAa,KAC/B,KAAA,WAAa,KAAK,IAAI,WAAa,KAAK,UACxC,KAAA,OAAS,EAAM,QAAU,IAAI,WAAW,IAAI,kBAAkB,KAAK,aACnE,KAAA,QAAU,EAAM,SAAW,IAAI,YAAY,IAAI,kBAAkB,KACjE,EAAM,UACF,KAAA,YAAc,EACd,KAAA,eAAiB,EACjB,KAAA,WAAa,KAAK,IAAI,YAI5B,YAAK,GACD,OAAA,IAAI,EAAY,GAG3B,KACW,MAAA,CAAC,IAAK,KAAK,IAAK,UAAW,KAAK,UAAW,OAAQ,KAAK,OACvD,QAAS,KAAK,SAG1B,IAAI,GACI,IAAA,EAAS,EAAU,KAAK,UACrB,OAAA,IAAI,WAAW,KAAK,IAAK,EAAQ,KAAK,WAGjD,OAAO,GACI,OAAsC,GAAtC,QAAQ,KAAK,KAAK,OAAQ,GAKjC,kBAAoC,OAAA,KAAK,QAAQ,GACjD,gBAAY,GAAsB,KAAA,QAAQ,GAAK,EAC/C,qBAAoC,OAAA,KAAK,QAAQ,GACjD,mBAAe,GAAmB,KAAA,QAAQ,GAAK,EAC/C,iBAAoC,OAAA,KAAK,QAAQ,GACjD,eAAW,GAAuB,KAAA,QAAQ,GAAK,EAEnD,QACQ,IAAA,EAAO,KAAK,WAAa,KAAK,UAC7B,IAAA,IAAI,EAAI,KAAK,YAAa,EAAI,EAAM,IACjC,GAAkB,GAAlB,KAAK,OAAO,IACqC,GAAjD,QAAQ,gBAAgB,KAAK,OAAQ,EAAG,EAAG,GAGpC,OAFF,KAAA,YAAc,EACd,KAAA,eAAiB,KAAK,IAAI,KAAK,eAAgB,EAAI,GACjD,EAGT,MAAA,IAAI,MAAM,2BAGpB,UAAU,GACF,IAAA,EAAS,KAAK,WAAa,EAC3B,GAAA,EAAS,KAAK,eAAiB,KAAK,UACpC,MAAM,IAAI,MAAM,2BAEb,OADF,KAAA,WAAa,EACX,KAAK,QAAQ,EAAQ,GAGhC,QAAQ,EAAgB,GAChB,IAAA,EAAO,IAAI,WAAW,KAAK,IAAK,EAAQ,GAErC,OADP,OAAO,eAAe,EAAM,OAAO,WAC5B,EAGX,SAAS,EAAiB,EAAS,GAC3B,IAAA,EAAM,KAAK,IAAI,GAEZ,OADP,EAAM,EAAI,MAAM,EAAQ,EAAI,QAAQ,EAAG,IAChC,CAAC,IAAK,IAAI,YAAY,SAAS,OAAO,GACrC,KAAM,EAAI,OAAS,GAG/B,KAAK,EAAiB,EAAS,EAAG,GAC1B,IAAA,EAAM,KAAK,IAAI,GAAS,MAAM,EACjB,GAAQ,EAAK,EAAS,OAAO,GACvC,MAAA,CAAC,IAAA,EAAK,KAAM,EAAI,QAG3B,SAAS,EAAiB,EAAgB,EACjC,EAAiB,GAClB,IAAA,EAAI,KAAK,IAAI,GAAS,SAAS,EAAQ,EAAS,GAE7C,OADP,EAAI,IAAI,EAAG,GACJ,EAAE,OAGb,UAAU,EAAiB,EAAe,EAAS,GAE3C,IAAA,EAAQ,OAAO,KAAK,EAAQ,KAAM,SAClC,GAAA,EAAM,OAAS,EAAS,KAAK,UACvB,MAAA,IAAI,oCAAoC,aAAmB,EAAM,WAEpE,OAAA,KAAK,MAAM,EAAS,EAAO,GAGtC,MAAM,EAAiB,EAAmB,EAAS,GAIxC,OAHH,EAAS,EAAM,OAAS,KAAK,YAC7B,EAAQ,EAAM,SAAS,EAAG,KAAK,UAAY,IAC1C,KAAA,IAAI,GAAS,IAAI,EAAO,GACtB,EAAM,QAqRrB,QAAA,YAAA,EAvQA,MAAM,UAAyB,EAA/B,KAOI,YAAY,EAAmB,EAAa,GAClC,MAAA,EAAK,GACN,KAAA,IAAM,EACN,KAAA,IAAM,EACN,KAAA,QAAS,EACT,KAAA,MAAQ,KAGjB,gBAAgB,GACN,MAAA,gBAAgB,GAEjB,KAAA,MACA,KAAA,OAGT,QAAQ,EAA2B,GAMxB,OALF,KAAK,SACC,EAAA,EAAA,SAAA,GAAU,GACZ,KAAA,MAAQ,IAAI,EAAiB,KAAK,IAAK,EAAQ,GAC/C,KAAA,MAAM,QAAQ,OAEhB,KAAK,MAGhB,QAAQ,GACC,KAAA,IAAM,EACN,KAAA,QAAS,EACT,KAAA,QAGT,QACU,MAAA,QACD,KAAA,MACA,KAAA,OAGT,MACU,MAAA,MAGV,OACQ,GAAA,KAAK,KAAO,KAAK,IAAI,IAAK,CACtB,IAAA,EAAM,KAAK,IAAI,IAAI,IAAI,KAAK,KAC5B,EAAoB,CAAC,EAAG,KAAK,KAAM,EAAG,KAAK,KAAM,EAAG,KAAK,KACzD,EAAM,KAAK,IACD,GAAV,EAAI,KACJ,EAAS,OAAO,OAAO,KAAK,QAAQ,OAAQ,IAC5C,IAAK,EAAO,EAAI,EAAI,QACpB,KAAK,SACL,EAAO,KAAO,CAAC,EAAI,YACnB,OAAM,GAEN,KAAK,UACL,EAAO,QAAU,KAAK,SAErB,KAAA,IAAI,MAAM,cAAe,KAAK,IAAK,GACpC,IAAA,EAAM,KAAK,OAAO,EAAQ,GACzB,KAAA,YAAY,EAAK,IAI9B,OACQ,GAAC,KAAK,KAEI,GADJ,KAAK,IAAI,IAAI,IAAI,KAAK,KACxB,GAAS,CACT,IAAA,OAAC,EAAD,IAAS,GAAO,KAAK,QAOrB,GANC,KAAA,IAAI,MAAM,cAAe,KAAK,IAAK,GACnC,KAAA,KAAO,EAAO,EACd,KAAA,KAAO,EAAO,EACd,KAAA,QAAU,EAAO,QAClB,KAAK,SACL,QAAQ,IAAI,UAAW,KAAK,SAC5B,KAAK,KAAO,EAAO,IACd,KAAA,IAAM,EAAO,EACd,EAAO,GAAK,GACR,GAAA,EAAO,KACF,KAAA,IAAM,KAAK,IAAI,IAAI,QAAQ,EAAO,KAAK,GAAI,EAAO,GAClD,KAAA,QAAS,MAEb,CACG,IAAA,EAAM,OAAO,MAAM,EAAO,GAC1B,EAAS,KAAK,IAAI,IAAI,SAAS,KAAK,IAAK,EAAK,EAAO,EAAG,EAAK,GAC7D,EAAO,EAAI,GACX,KAAK,WAAW,EAAK,GACpB,KAAA,IAAM,EACN,KAAA,QAAS,IAOlC,QACQ,IAAC,IAAK,EAAN,KAAY,GAAQ,KAAK,IAAI,IAAI,SAAS,KAAK,KAE5C,MAAA,CAAC,OADK,KAAK,MAAM,GACR,IAAK,GAGzB,OAAO,EAAmB,GAClB,IAAA,EAAM,KAAK,WAAW,GAAU,IAChC,GAAA,GAAO,EAAM,EAAI,OAAS,KAAK,IAAI,IAAI,UAAW,CAC9C,IAAA,EAAI,KAAK,MAAM,GAAQ,IAC3B,EAAM,KAAK,WAAW,OAAO,OAAO,GAAI,EAAQ,CAAC,EAAA,KAE9C,OAAA,EACH,KAAK,IAAI,IAAI,MAAM,KAAK,IAAK,EAAK,GAAO,EAGjD,WAAW,GACA,OAAA,KAAK,IAAI,IAAI,UAAU,KAAK,IAAK,KAAK,UAAU,IAG3D,YAAY,EAAiB,GAElB,IADH,IAAA,EAAyB,KACtB,GAAO,EAAS,EAAI,QACvB,EAAM,EAAI,SAAS,GAEnB,GADA,EAAO,EAAK,SACE,OAAO,KAAM,IACpB,EAAA,EAAA,SAAA,EAAS,GAIxB,WAAW,EAAiB,GAGjB,IAFH,IAAA,EAAyB,KAEtB,EAAS,EAAI,QAAQ,CACxB,EAAO,EAAK,QACR,IAAA,OAAC,EAAD,IAAS,GAAO,EAAK,QAIrB,GAHJ,EAAM,KAAK,IAAI,IAAI,SAAS,EAAK,IAAK,EAAK,EAAI,OAAS,EAAQ,EAAK,IAC9D,EAAA,EAAA,SAAA,EAAM,GACb,GAAU,IACJ,EAAO,GAAK,GAAI,OAEnB,EAAA,EAAA,SAAA,GAAU,EAAI,QAGzB,MAAM,GAEK,OADF,IAAQ,EAAS,KAAK,QAAQ,QAC5B,EAAO,GAAK,EACf,KAAK,IAAI,cAAc,EAAO,GAAK,KAAK,IAAI,cAMxD,MAAM,UAAyB,EAA/B,KASI,YAAY,EAAmB,EAAc,GAI7B,OAHN,MAAA,EAAK,EAAQ,GACd,KAAA,IAAM,EACN,KAAA,QAAS,EACF,IAAI,MAAM,KAAM,IAAI,EAAc,aAKlD,YAAY,EAAc,EAAyB,KAAK,IAAI,cACnD,KAAA,QAAS,EACR,MAAA,EAAO,IAAI,EAAiB,KAAK,IAAK,KAAM,GAG3C,OAFP,EAAK,QAAQ,GACR,KAAA,SAAS,EAAM,GACb,EAGX,SAAS,EAAc,GAIZ,OAHF,KAAA,QAAS,EACd,EAAO,MAAM,SAAS,EAAM,GACvB,KAAA,QACE,EAGX,YAAY,GACH,KAAA,QAAS,EACR,MAAA,YAAY,GACb,KAAA,QAGT,QACS,KAAA,IAAI,cAAc,KAAK,KAAK,MAC5B,KAAA,OAGT,QAAQ,GACE,MAAA,QAAQ,GACd,EAAK,MAAQ,KAGjB,UACU,MAAA,EAAO,KAAK,KAGX,OAFA,EAAA,EAAA,SAAA,EAAM,kCACb,EAAK,OACE,EAGX,OACQ,GAAA,KAAK,IAAI,IAAK,CACV,IAAA,EAAc,GACb,IAAA,IAAK,EAAM,KAAS,OAAO,QAAQ,KAAK,UACzC,EAAE,GAAQ,CAAC,IAAK,EAAK,KAErB,IAAA,EAAO,KAAK,UACZ,EAAO,KAAK,UAAU,GACrB,KAAA,IAAI,MAAM,cAAe,KAAK,IAAK,GACxC,EAAK,IAAM,OAAO,KAAK,GACvB,EAAK,MACL,EAAK,OACA,KAAA,IAAM,EAAK,IACX,KAAA,QAAS,GAItB,OAEQ,GAAU,GADJ,KAAK,IAAI,IAAI,IAAI,KAAK,KACxB,GAAS,CACT,IAAA,EAAO,KAAK,UAEZ,GADJ,EAAK,OACD,EAAK,eAAiB,EAAK,KAAO,EAAK,MAAQ,KAAK,IAAK,CACrD,IAAA,EAAc,KAAK,MAAM,EAAK,IAAI,SAAS,UAC1C,KAAA,IAAI,MAAM,cAAe,KAAK,IAAK,GACpC,IAAA,EAAW,GACV,IAAA,IAAK,EAAM,KAAa,OAAO,QAAQ,GAAK,IACzC,GAAwB,iBAAjB,EAAS,IAAkB,CAC9B,IAAA,EAAQ,KAAK,IAAI,cAAc,EAAS,KAC5C,EAAS,GAAQ,EAAM,QAAQ,KAAM,GAGxC,KAAA,SAAW,EACX,KAAA,IAAM,EAAK,IACX,KAAA,QAAS,MAqB9B,SAAU,GAKO,EAAA,YAAA,MACT,IAAI,EAAwB,GAIjB,MAHM,aAAT,GAAuB,EAAK,IAAI,MAAQ,EAAK,QAC7C,EAAK,OAEF,EAAK,KAQP,EAAA,aAAA,MAET,YAAY,GAA+B,KAAA,KAAO,EAElD,yBAAyB,EAAc,GAE5B,OADF,KAAA,KAAK,OACH,EAAS,eAAe,GAC3B,CAAC,cAAc,EAAM,YAAY,QAAQ,EAGjD,IAAI,EAAc,GAEP,OADF,KAAA,KAAK,OACH,EAAS,GAGpB,IAAI,EAAc,EAAc,GAIrB,OADP,EAAS,GAAQ,GACV,IArCnB,CAAU,IAAA,EAAa;;AC3gBvB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,OAAA,eAAA,QAAA,UAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,eAAA,OAAA,eAAA,QAAA,gBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,iBAAA,OAAA,eAAA,QAAA,cAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,eAAA,OAAA,eAAA,QAAA,WAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,YAAA,OAAA,eAAA,QAAA,kBAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,mBAAA,OAAA,eAAA,QAAA,eAAA,CAAA,YAAA,EAAA,IAAA,WAAA,OAAA,EAAA,gBAFA,IAAA,EAAA,QAAA,aACA,EAAA,QAAA,UACA,EAAA,QAAA;;ACFA,IAAIC,EAAKtC,QAAQ,MAEjBsB,OAAOvB,QAAU,SAAsB0B,GAC9B,OAAA,IAAIlB,QAAQ,SAASC,EAASG,GACnC2B,EAAGC,SAASC,UAAYf,EAAQ,OAAQ,SAASjC,EAAKiD,GAChDjD,EACFmB,EAAOnB,GAIPkD,aAAa,WACXlC,EAAQiC,SAKf3B,KAAK,SAASL,GACTkC,IAAAA,SAAS,GAAIlC,EAAbkC","file":"index.js","sourceRoot":"../../src/kernel","sourcesContent":["\ntype IntArray = Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array;\n\n\nclass SharedQueue<A extends IntArray> {\n\n    _data: A;\n    _wait: Int32Array;\n\n    constructor(props: SharedQueueProps<A>) {\n        this._data = props.data;\n        this._wait = props.wait || new Int32Array(new MaybeSharedArrayBuffer(4 * 2));\n    }\n\n    static from<A extends IntArray>(props: SharedQueueProps<A>) {\n        return new SharedQueue<A>(props);\n    }\n\n    to(): SharedQueueProps<A> {\n        return {data: this._data, wait: this._wait};\n    }\n\n    enqueue(v: number) {\n        let head = Atomics.load(this._wait, 0), tail = Atomics.load(this._wait, 1);\n\n        head ? head-- : (head = this._data.length);\n\n        if (head != tail) {\n            Atomics.store(this._data, tail++, v);\n            Atomics.store(this._wait, 1, tail);\n            Atomics.notify(this._wait, 1, 1);\n            return 1;\n        }\n        else return 0;\n    }\n\n    enqueueAll(vs: IntArray) {\n        let head = Atomics.load(this._wait, 0), tail = Atomics.load(this._wait, 1);\n\n        head ? head-- : (head = this._data.length);\n\n        var i: number;\n        for (i = 0; head != tail && i < vs.length; i++) {\n            Atomics.store(this._data, tail++, vs[i]);\n        }\n\n        if (i > 0) {\n            Atomics.store(this._wait, 1, tail);\n            Atomics.notify(this._wait, 1, 1);\n        }\n        return i;\n    }\n\n    wait() {\n        let head = Atomics.load(this._wait, 0), tail = Atomics.load(this._wait, 1);\n\n        while (head == tail) {\n            Atomics.wait(this._wait, 1, tail);\n            tail = Atomics.load(this._wait, 1);\n        }\n    }\n\n    dequeue() {\n        this.wait();\n\n        let head = Atomics.load(this._wait, 0),\n            top = Atomics.load(this._data, head++)\n\n        Atomics.store(this._wait, 0, head);\n        Atomics.notify(this._wait, 0, 1);\n        return top;\n    }\n\n    dequeueSome(count: number, out: A, offset: number): number {\n        if (count == 0) return 0;\n\n        this.wait();\n\n        let head = Atomics.load(this._wait, 0), tail = Atomics.load(this._wait, 1);\n\n        var i: number;\n        for (i = 0; head != tail && offset < count; i++) {\n            out[offset++] = Atomics.load(this._data, head++);\n            if (tail >= this._data.length) tail = 0;\n        }\n\n        Atomics.store(this._wait, 0, head);\n        Atomics.notify(this._wait, 0, 1);\n        return i;        \n    }\n\n    isEmpty() { \n        let head = Atomics.load(this._wait, 0), tail = Atomics.load(this._wait, 1);\n        return head == tail;\n    }\n}\n\ntype SharedQueueProps<A> = { data: A, wait?: Int32Array };\n\nconst MaybeSharedArrayBuffer = typeof SharedArrayBuffer != 'undefined'\n    ? SharedArrayBuffer : ArrayBuffer;\n\n\n\nexport { SharedQueue, SharedQueueProps }","import { EventEmitter } from 'events';\nimport { SharedQueue, SharedQueueProps } from './bits/queue';\n\n\n\nclass SimplexStream extends EventEmitter {\n\n    queue: SharedQueue<Uint8Array>\n    meta: Int32Array\n\n    pos: number\n    blocking: boolean\n\n    constructor(_from: SimplexStreamProps = {}) {\n        super();\n        this.queue = SharedQueue.from(_from.queue ||\n            {data: new Uint8Array(new MaybeSharedArrayBuffer(1024))});\n        this.meta = _from.meta || new Int32Array(new MaybeSharedArrayBuffer(4));\n        if (!_from.meta) this.length = -1;\n        /* local state */\n        this.pos = 0;\n        this.blocking = true;\n    }\n\n    static from(props: SimplexStreamProps) { return new SimplexStream(props); }\n\n    to(): SimplexStreamProps { return {queue: this.queue.to(), meta: this.meta}; }\n\n    get length() {\n        return Atomics.load(this.meta, 0);\n    }\n\n    set length(l: number) {\n        Atomics.store(this.meta, 0, l);\n    }\n\n    read(readBuffer: Uint8Array, offset: number, length: number, position) {\n        \n        if (length > readBuffer.length) length = readBuffer.length;\n\n        if (this.queue.isEmpty()) {\n            if (offset > 0) return 0;\n            else if (!this.blocking) throw {errno: 35, code: 'EAGAIN'};\n        }\n\n        if (this.length >= 0 && this.pos >= this.length)\n            return 0;\n\n        var readc = this.queue.dequeueSome(length, readBuffer, offset);\n        if (readc > 0) {\n            if (this.length >= 0)\n                readc = Math.min(this.length - this.pos, readc);\n            this.pos += readc;\n            this.emit('data', readBuffer.slice(offset, readc));\n        }\n        return readc;\n    }\n\n    write(writeBuffer: Uint8Array) {\n        let writec = this.queue.enqueueAll(writeBuffer);\n        this.pos += writec;\n        return writec;\n    }\n\n    end() {\n        this.length = this.pos;\n        this.queue.enqueue(0);  // got to enqueue something to notify\n    }\n\n    reset() {\n        this.length = -1;\n        this.pos = 0;\n        this.blocking = true;\n    }\n}\n\n\ntype SimplexStreamProps = {\n    queue? : SharedQueueProps<Uint8Array>;\n    meta? : Int32Array;\n};\n\n\nclass TransformStreamDuplex extends EventEmitter {\n\n    ts : TransformStream;\n    writer : WritableStreamDefaultWriter;\n    reader : ReadableStreamReader;\n\n    constructor(ts: TransformStream) {\n        super();\n        this.ts = ts;\n        this.writer = this.ts.writable.getWriter();\n        this.reader = this.ts.readable.getReader();\n\n        (async () => {\n            while (true) {\n                let {done, value} = await this.reader.read();\n                if (value) this.emit('data', value);\n                if (done) { this.emit('end'); break; }\n            }\n        })();\n    }\n\n    write(data: Uint8Array) {\n        this.writer.write(data);\n    }\n\n    end() {\n        this.writer.close();\n    }\n\n}\n\n\nconst MaybeSharedArrayBuffer = typeof SharedArrayBuffer != 'undefined'\n    ? SharedArrayBuffer : ArrayBuffer;\n\n\n\nexport {SimplexStream, TransformStreamDuplex}\n\n","var names = [\n    \"signal\",\n    \"raise\",\n    \"pipe\",\n    \"dup\",\n    \"dup2\",\n    \"execv\",\n    \"execl\",\n    \"execvp\",\n    \"execlp\",\n    \"getpwnam\",\n    \"getpwnam_r\",\n    \"getpwent\",\n    \"tcsetpgrp\",\n    \"kill\",\n    \"killpg\",\n    \"fork\",\n    \"getpid\",\n    \"setpgid\",\n    \"getpgrp\",\n    \"setpgrp\",\n    \"issetugid\",\n    \"strsignal\",\n    \"wait4\",\n    \"waitpid\",\n    \"getuid\",\n    \"geteuid\",\n    \"getgid\",\n    \"getegid\",\n    \"umask\",\n    \"getrlimit\",\n    \"setrlimit\",\n    \"sigfillset\",\n    \"sigprocmask\",\n    \"sigsetmask\",\n    \"siginterrupt\",\n    \"sigaltstack\",\n    \"getppid\",\n    \"tcgetpgrp\",\n    \"gethostname\",\n    \"tzset\",\n    \"flockfile\",\n    \"ftrylockfile\",\n    \"funlockfile\",\n    \"getpwuid\",\n    \"getpwuid_r\",\n    \"setpwent\",\n    \"endpwent\",\n    \"getgrgid\",\n    \"setreuid\",\n    \"setregid\",\n    \"strmode\",\n    \"acl_get_file\",\n    \"acl_free\",\n    \"acl_get_entry\",\n    \"fchdir\",\n    \"chown\",\n    \"fchown\",\n    \"lchown\",\n    \"fchownat\",\n    \"chmod\",\n    \"fchmod\",\n    \"fchmodat\",\n    \"lchmod\",\n    \"futimes\",\n    \"utimes\",\n    \"system\",\n    \"mkstemp\",\n    \"mkstemps\",\n    \"mkostemp\",\n    \"mkostemps\",\n    \"tmpfile\",\n    \"settimeofday\",\n    \"bsd_signal\",\n    \"ttyname\",\n    \"dlclose\",\n    \"ctermid_r\",\n    \"socket\",\n    \"connect\",\n    \"popen\",\n    \"pclose\",\n    \"errx\",        //???\n    \"vwarnx\",      //???\n    // posix\n    \"posix_spawn\",\n    \"posix_spawnp\",\n    \"posix_spawnattr_init\",\n    \"posix_spawnattr_destroy\",\n    \"posix_spawnattr_setflags\",\n    \"posix_spawnattr_setsigmask\",\n    \"posix_spawn_file_actions_init\",\n    \"posix_spawn_file_actions_destroy\",\n    \"posix_spawn_file_actions_addopen\",\n    \"posix_spawn_file_actions_addclose\",\n    \"posix_spawn_file_actions_adddup2\",\n    // pthreads\n    \"pthread_mutex_init\",\n    \"pthread_mutex_lock\",\n    \"pthread_cond_timedwait\",\n    \"pthread_cond_signal\",\n    \"pthread_mutex_unlock\",\n    \"pthread_cond_destroy\",\n    \"pthread_mutex_destroy\", \n    \"pthread_cond_wait\",\n    \"pthread_cond_init\",\n    \"pthread_attr_init\",\n    \"pthread_attr_setstacksize\",\n    \"pthread_attr_destroy\",\n    \"pthread_create\",\n    \"pthread_detach\",\n    \"pthread_self\",\n    \"pthread_exit\",\n    \"pthread_mutex_trylock\",\n    \"pthread_key_create\",\n    \"pthread_key_delete\",\n    \"pthread_setspecific\",\n    \"pthread_getspecific\",\n    // curses (terminfo)\n    \"tgetent\",\n    \"tgetflag\",\n    \"tgetnum\",\n    \"tgetstr\",\n    \"tgoto\",\n    \"tputs\",\n    // termios\n    \"cfgetospeed\",\n    \"cfgetispeed\",\n    \"cfsetospeed\",\n    \"cfsetispeed\",\n    \"tcsendbreak\",\n    \"tcdrain\",\n    \"tcflush\",\n    \"tcflow\",\n    \"tcgetsid\"\n]\n\nconst stubs: {\n    debug: (message: string) => void,\n    [key: string]: (...args: any[]) => void\n} = {\n    debug: (message) => {}\n};\nfor (let nm of names) {\n    stubs[nm] = function() {\n        stubs.debug(`stub for ${nm} [${[...arguments]}]`);\n    }\n}\n\nexport default stubs\n","import { ExecCore } from '../exec';\n\n\n\nclass DynamicLoader {\n\n    core: ExecCore\n\n    dylibTable?: DynamicLibrary.Table\n\n    constructor(core: ExecCore) {\n        this.core = core;\n    }\n\n    preload(path: string, uri: string, reloc?: DynamicLibrary.Relocations) {\n        if (!this.dylibTable)\n            this.dylibTable = new DynamicLibrary.Table();\n\n        if (this.dylibTable.def.has(path)) return;\n\n        return this.core.fetchCompile(uri).then(w => {\n            this.dylibTable.def.set(path, new DynamicLibrary.Def(w, reloc));\n        });\n    }\n\n    get import() {\n        return bindAll(this, ['dlopen', 'dlsym']);\n    }\n\n    get extlib() {\n        return bindAll(this, ['dlerror_get']);\n    }\n\n    // -----------\n    // Loader Part\n    // -----------\n\n    dlopen(path: i32, flags: i32) {\n        var path_str = this.userGetCString(path).toString('utf-8');\n        this.core.debug(`dlopen(\"${path_str}\", ${flags})`);\n        if (!this.dylibTable) return 0;\n        var def = this.dylibTable.def.get(path_str);\n        if (def) {\n            var instance = def.instantiate(this.core),\n                handle = this.dylibTable.ref.size + 1;\n            this.dylibTable.ref.set(handle, {instance});\n            return handle;\n        }\n        else {\n            return 0;  // @todo set error message in dlerror\n        }\n    }\n\n    dlsym(handle: i32, symbol: i32) {\n        var symbol_str = this.userGetCString(symbol).toString('utf-8');\n        //this.core.debug(`dlsym(${handle}, \"${symbol_str}\")`);\n        var ref = this.dylibTable.ref.get(handle);\n        if (ref) {\n            var sym = ref.instance.exports[symbol_str];\n            if (sym && sym instanceof Function) {\n                return this.allocateFunc(sym);\n            }\n        }\n        return 0;  // @todo set error message in dlerror\n    }\n\n    dlerror_get(pbuf: i32) {\n        var ret = 'not found\\0';  // @todo\n        return this.userCStringMalloc(ret, pbuf);        \n    }\n\n    allocateFunc(func: Function) {\n        var h = this.core.proc.funcTable.grow(1);\n        this.core.proc.funcTable.set(h, func);\n        return h;        \n    }\n\n    // - some helpers from Proc\n\n    userGetCString(addr: i32) {\n        return this.core.proc.userGetCString(addr);\n    }\n\n    userCStringMalloc(s: string, pbuf: i32) {\n        return this.core.proc.userCStringMalloc(s, pbuf);\n    }\n\n}\n\n\nnamespace DynamicLibrary {\n\n    export class Table {\n        def: Map<string, Def> = new Map()\n        ref: Map<i32, Ref> = new Map()\n    }\n\n    export class Def {\n        module: WebAssembly.Module\n        reloc: Relocations\n\n        stackSize: number = 1 << 16    /** @todo */\n        memBlocks: number = 10         /** @todo */\n        tblSize: number = 1024         /** @todo */\n\n        constructor(module: WebAssembly.Module, reloc: Relocations = {}) {\n            this.module = module;\n            this.reloc = reloc;\n        }\n\n        instantiate(core: ExecCore) {\n            var stack_base = core.wasi.memory.buffer.byteLength,\n                mem_base = stack_base + this.stackSize,\n                tbl_base = core.proc.funcTable.length;\n\n            core.wasi.memory.grow(this.memBlocks);\n            core.proc.funcTable.grow(this.tblSize);\n\n            var globals = this.globals(this.module, core.wasm.instance);\n            var instance = new WebAssembly.Instance(this.module, {\n                env: { \n                    memory: core.wasi.memory,\n                    table: core.proc.funcTable,         // <--- Emscripten\n                    __indirect_function_table: core.proc.funcTable,\n                    __memory_base: mem_base,\n                    __table_base: tbl_base,\n                    __stack_pointer: this._mkglobal(mem_base), // stack grows down?\n                    stackSave: () => mem_base,          // <--- Emscripten\n                    stackRestore: () => {},\n                    ...this.relocTable(this.module, core.wasm.instance),\n                    ...this.emglobals(this.module, mem_base, core.wasm.instance, () => instance)\n                },\n                'GOT.mem': globals,\n                wasi_ext: core.proc.extlib\n            });\n            this.globalsInit(instance, mem_base, globals);\n\n            var init = instance.exports.__post_instantiate;     // <--- Emscripten\n            if (init instanceof Function) init();\n            var ctors = instance.exports.__wasm_call_ctors;     // <--- Clang\n            if (ctors instanceof Function) ctors();\n\n            return instance;\n        }\n\n        relocTable(module: WebAssembly.Module, main: WebAssembly.Instance) {\n            var imports = WebAssembly.Module.imports(module),\n                env = {};\n            for (let imp of imports) {\n                if (imp.kind === 'function') {\n                    var exp = main.exports[imp.name];\n                    if (exp instanceof Function)\n                        env[imp.name] = exp;\n                }\n            }\n            Object.assign(env, this.reloc.js || {});\n            return env;\n        }\n\n        globals(module: WebAssembly.Module, main: WebAssembly.Instance) {\n            var imports = WebAssembly.Module.imports(module),\n                g = {};\n            for (let imp of imports) {\n                if (imp.kind === 'global') {\n                    var exp = main.exports[imp.name];\n                    g[imp.name] = this._mkglobal(\n                        exp instanceof WebAssembly.Global ? exp.value : undefined);\n                }\n            }\n            return g;\n        }\n\n        globalsInit(instance: WebAssembly.Instance, mem_base: number, globals: {[name: string]: WebAssembly.Global}) {\n            for (let g in globals) {\n                var exp = instance.exports[g];\n                if (exp instanceof WebAssembly.Global)\n                    globals[g].value = mem_base + exp.value;\n            }\n        }\n\n        /**\n         * [internal] creates a table of self-referenced globals.\n         * Specific to Emscripten.\n         */\n        emglobals(module: WebAssembly.Module, mem_base: number, main: WebAssembly.Instance, instance: () => WebAssembly.Instance) {\n            var imports = WebAssembly.Module.imports(module),\n                exports = WebAssembly.Module.exports(module),\n                resolve = (symbol: string) => (mem_base + +instance().exports[symbol]),\n                g = {};\n            for (let imp of imports) {\n                if (imp.kind === 'function' && imp.name.startsWith('g$')) {\n                    let name = imp.name.slice(2),\n                        bud: WebAssembly.ExportValue | WebAssembly.ModuleExportDescriptor;\n                    if (bud = main.exports[name])\n                        g[imp.name] = () => bud;\n                    else if (bud = exports.find((wed) => wed.name == name))\n                        g[imp.name] = () => resolve(name)\n                }\n            }\n            return g;\n        }\n\n        _mkglobal(initial: i32 = 0xDEADBEEF) {\n            return new WebAssembly.Global({value:'i32', mutable:true}, initial);\n        }\n    }\n\n    export type Ref = {\n        instance?: WebAssembly.Instance\n    };\n\n    export type Relocations = {\n        js?: {[sym: string]: Function}\n    };\n\n}\n\n\ntype i32 = number;\n\nfunction bindAll(instance: any, methods: string[]) {\n    return methods.reduce((d, m) =>\n        Object.assign(d, {[m]: instance[m].bind(instance)}), {});\n}\n\n\n\nexport { DynamicLoader, DynamicLibrary }\n","\nconst constants = {\n    O_RDONLY: 0,\n    O_WRONLY: 1,\n    O_RDWR: 2,\n    S_IFMT: 61440,\n    S_IFREG: 32768,\n    S_IFDIR: 16384,\n    S_IFCHR: 8192,\n    S_IFBLK: 24576,\n    S_IFIFO: 4096,\n    S_IFLNK: 40960,\n    S_IFSOCK: 49152,\n    O_CREAT: 512,\n    O_EXCL: 2048,\n    O_NOCTTY: 131072,\n    O_TRUNC: 1024,\n    O_APPEND: 8,\n    O_DIRECTORY: 1048576,\n    O_NOFOLLOW: 256,\n    O_SYNC: 128,\n    O_DSYNC: 4194304,\n    O_SYMLINK: 2097152,\n    O_NONBLOCK: 4,\n    S_IRWXU: 448,\n    S_IRUSR: 256,\n    S_IWUSR: 128,\n    S_IXUSR: 64,\n    S_IRWXG: 56,\n    S_IRGRP: 32,\n    S_IWGRP: 16,\n    S_IXGRP: 8,\n    S_IRWXO: 7,\n    S_IROTH: 4,\n    S_IWOTH: 2,\n    S_IXOTH: 1,\n    F_OK: 0,\n    R_OK: 4,\n    W_OK: 2,\n    X_OK: 1,\n    UV_FS_COPYFILE_EXCL: 1,\n    COPYFILE_EXCL: 1 };\n\n\nclass FsServices {\n\n    constants = constants;\n\n    strmode(mode: number) {\n        const c = constants;\n        let ret = '';\n\n        //switch (mode & c.S_IFMT) {\n        let d = { [c.S_IFDIR]: 'd', [c.S_IFCHR]: 'c', [c.S_IFBLK]: 'b', \n                  [c.S_IFREG]: '-', [c.S_IFLNK]: 'l', [c.S_IFSOCK]: 's',\n                  [c.S_IFIFO]: 'p' };\n        ret += d[mode & c.S_IFMT] || '?';\n        /* user */\n        ret += (mode & c.S_IRUSR) ? 'r' : '-';\n        ret += (mode & c.S_IWUSR) ? 'w' : '-';\n        ret += (mode & c.S_IXUSR) ? 'x' : '-';  /* @todo: ISUID? */\n        /* group */\n        ret += (mode & c.S_IRGRP) ? 'r' : '-';\n        ret += (mode & c.S_IWGRP) ? 'w' : '-';\n        ret += (mode & c.S_IXGRP) ? 'x' : '-';  /* @todo: ISGID? */\n        /* other */\n        ret += (mode & c.S_IROTH) ? 'r' : '-';\n        ret += (mode & c.S_IWOTH) ? 'w' : '-';\n        ret += (mode & c.S_IXOTH) ? 'x' : '-';  /* @todo: ISVTX? */\n\n        return ret;\n    }   \n \n}\n\nconst fs = new FsServices;\n\nexport {fs}\n","import assert from 'assert';\nimport path from 'path';\nimport { EventEmitter } from 'events';\n\nimport stubs from './stubs';\nimport { ExecCore } from '../exec';\nimport { Buffer } from 'buffer';\nimport { SharedQueue } from './queue';\nimport { DynamicLoader } from './dyld';\nimport { fs } from './fs';\nimport * as constants from '@wasmer/wasi/lib/constants';\n\n\n\nclass Proc extends EventEmitter {\n\n    core: ExecCore\n    opts: ProcOptions\n\n    sigvec: SignalVector\n    childq: ChildProcessQueue\n    dyld: DynamicLoader\n\n    childset: Set<number>\n    onJoin: (onset: ExecvCall | Error) => void\n\n    pending: (() => void)[]\n\n    funcTable?: WebAssembly.Table\n\n    debug: (...args: any) => void\n\n    constructor(core: ExecCore, opts: ProcOptions={}) {\n        super();\n        this.core = core;\n        this.opts = opts;\n\n        this.sigvec = new SignalVector;\n        this.sigvec.on('signal', ev => this.emit('syscall', {\n            func: 'signal',\n            data: ev\n        }));\n\n        this.childq = new SharedQueue({data: new Uint32Array(new MaybeSharedArrayBuffer(4 * 128))});\n        this.childset = new Set;\n\n        this.dyld = new DynamicLoader(core);\n\n        this.pending = [];\n    }\n\n    init() {\n        const newfd = this.newfd(),\n              fdcwd: any = {  /* type File is not exported by wasmer :( */\n                  real: newfd,\n                  rights: RIGHTS_ALL,  // uhm\n                  filetype: constants.WASI_FILETYPE_DIRECTORY,\n                  path: '.',\n                  fakePath: '.'\n              };\n        this.core.wasi.FD_MAP.set(AT_FDCWD, fdcwd);\n        this.core.wasi.FD_MAP.set(newfd, fdcwd);  // last key inserted must be the largest\n\n        this.core.wasmFs.fs.writeFileSync('/dev/null', '');\n    }\n\n    get import() {\n        stubs.debug = this.debug; // global :(\n        this.sigvec.debug = this.debug;\n\n        if (!this.funcTable) {\n            this.funcTable = new WebAssembly.Table({\n                initial: this.opts.funcTableSz || 1024, \n                element: 'anyfunc'\n            });\n        }\n\n        return {\n            ...stubs,\n            __indirect_function_table: this.funcTable, \n            ...bindAll(this, [\n                'chdir', 'getcwd', 'realpath', 'geteuid', 'strmode',\n                '__control_setjmp', '__control_setjmp_with_return',\n                'setjmp', 'longjmp', 'sigsetjmp', 'siglongjmp',\n                'vfork', '__control_fork', 'wait', 'wait3', 'execve',\n                'sigkill', 'sigsuspend', 'sigaction', '__SIG_IGN',\n                'getpagesize', 'posix_spawn']),\n            ...this.dyld.import\n        };\n    }\n\n    get extlib() {\n        return {\n            ...bindAll(this, ['trace', 'sorry', 'dupfd',\n                'progname_get', 'login_get']),\n            ...this.dyld.extlib\n        };\n    }\n\n    get path() {\n        return {...path,\n            resolve: (dir: string, ...paths: string[]) => {\n                if (dir == '.') dir = this.core.env.PWD;\n                return path.resolve(dir || '/', ...paths)\n            }\n        };\n    }\n\n    get mem(): DataView {\n        this.core.wasi.refreshMemory();\n        return this.core.wasi.view;\n    }\n\n    get membuf(): Buffer {\n        return Buffer.from(this.core.wasi.memory.buffer);        \n    }\n\n    /**\n     * This is a nasty hack and so deserves an apology.\n     */\n    sorry() {\n        for (var f: () => void; f = this.pending.pop(); f());\n    }\n\n    // ----------------\n    // Environment Part\n    // ----------------\n\n    chdir(buf: i32) {\n        var d = this.userGetCString(buf).toString('utf-8');\n        this.core.env.PWD = d;\n    }\n\n    getcwd(buf: i32, sz: i32) {\n        this.debug('getcwd', buf, sz);\n        /* @todo allocate buf if null */\n        if (buf === 0) throw 'getcwd(0): not implemented';\n        let ret = (this.core.env.PWD || '') + '\\0';\n        if (ret.length > sz) throw {errno: 1, code: 'ERANGE'};\n        this.membuf.write(ret, buf);\n        return buf;\n    }\n\n    progname_get(pbuf: i32) {\n        var ret = this.core.argv[0] + '\\0';\n        return this.userCStringMalloc(ret, pbuf);\n    }\n\n    login_get(pbuf: i32) {\n        var ret = 'user' + '\\0';\n        return this.userCStringMalloc(ret, pbuf);\n    }\n\n    geteuid() {\n        return 0;\n    }\n\n    trace(message: i32) {\n        var buf = this.userGetCString(message);\n        this.core.trace(buf);\n    }\n\n    // ----------\n    // Files Part\n    // ----------\n\n    realpath(file_name: i32, resolved_name: i32) {\n        var arg = this.userGetCString(file_name);\n        /* @todo allocate resolved_name if null */\n        if (resolved_name === 0) throw 'realpath(0): not implemented';\n        let ret = path.resolve(this.core.env.PWD, arg.toString('utf-8')) + '\\0';\n        if (ret.length > PATH_MAX) throw {errno: 1, code: 'ERANGE'};\n        this.membuf.write(ret, resolved_name);\n        return resolved_name;\n    }\n\n    newfd(minfd: number = 0) {\n        var highest = Math.max(...this.core.wasi.FD_MAP.keys());\n        return Math.max(minfd, highest + 1);\n    }\n\n    dupfd(fd: i32, minfd: i32, cloexec: boolean) {\n        this.debug('dupfd', fd, minfd, cloexec);\n        var desc = this.core.wasi.FD_MAP.get(fd);\n        if (!desc) return -1;\n\n        var newfd = this.newfd(minfd);\n        this.core.wasi.FD_MAP.set(newfd, this.dupdesc(desc));\n        return newfd;\n    }\n\n    dupdesc(desc: {real: number}): any /* File is not exported from @wasmer/wasi */ {\n        // A hack to get a new \"real\" fd\n        var newreal = this.core.wasmFs.volume.openSync('/', 'r');\n        // - this heavily relies on the memfs implementation of Volume\n        var realFD_MAP = this.core.wasmFs.volume.fds;\n        realFD_MAP[newreal] = realFD_MAP[desc.real];\n        return Object.assign({}, desc, {real: newreal});\n    }\n\n    strmode(mode: i32, buf: i32) {\n        let ret = fs.strmode(mode) + '\\0';\n        this.membuf.write(ret, buf);\n    }\n\n    // ------------\n    // Control Part\n    // ------------\n\n    __control_setjmp(env: i32, block: i32) {\n        this.debug(`__control_setjmp [${env}, ${block}]`);\n        this.mem.setUint32(env, 0);  // set jmpbuf[0].ret = 0\n        let impl = this.blockImpl(block), val = 0;\n        try {\n            while (true) {\n                try {\n                    return impl(val);\n                }\n                catch (e) {\n                    this.debug(`setjmp caught ${JSON.stringify(e)}`);\n                    if (e instanceof Longjmp && e.env == env)\n                        val = e.val;\n                    else\n                        throw e;\n                }\n            }\n        }\n        finally {\n            this.debug(`__control_setjmp exiting`);\n        }\n    }\n\n    __control_setjmp_with_return(env: i32, block: i32) {\n        return this.__control_setjmp(env, block);\n    }\n\n    setjmp(env: i32) {\n        console.warn('setjmp', env);\n        return 0;\n    }\n\n    longjmp(env: i32, val: i32) {\n        this.debug(`longjmp [${env}] ${val}`);\n        throw new Longjmp(env, val);\n    }\n\n    sigsetjmp(env: i32, save_mask: i32) {\n        console.warn('sigsetjmp', env, save_mask);\n        return 0;\n    }\n\n    siglongjmp(env: i32, val: i32) {\n        this.longjmp(env, val);\n    }\n\n    vfork() {\n        var pid = Math.max(0, ...this.childset) + 1;\n        this.childset.add(pid);\n        this.onJoin = (onset: ExecvCall | Error) => {\n            if (onset instanceof ExecvCall) {\n                let e = onset;\n                this.debug('execv: ', e.prog, e.argv.map(x => x.toString('utf-8')));\n                this.emit('syscall', {\n                    func: 'spawn', \n                    data: {pid, execv: e, env: this.core.env}\n                });\n            }\n            else throw onset;\n        };\n        return pid;\n    }\n\n    __control_fork(v1: i32, v2: i32, block: i32) {\n        let impl = this.blockImpl(block);\n        try {\n            impl(v1);\n            if (this.onJoin) this.onJoin(null);\n        }\n        catch (e) {\n            if (this.onJoin) this.onJoin(e);\n        }\n        this.onJoin = null;\n        impl(v2);\n    }\n\n    execve(path: i32, argv: i32, envp: i32) {\n        this.debug(`execv(${path}, ${argv}, ${envp})`);\n        throw new ExecvCall(\n            this.userGetCString(path).toString('utf-8'),\n            this.userGetCStrings(argv),\n            this.userGetCStrings(envp));\n    }\n\n    posix_spawn(pid: i32, path: i32, file_actions: i32, attrp: i32,\n                argv: i32, envp: i32) {\n        var pathStr = this.userGetCString(path).toString('utf-8');\n        this.debug(`posix_spawn(${pid}, \"${pathStr}\", ${file_actions}, ${attrp}, ...})`);\n        var execv = new ExecvCall(\n                        pathStr,\n                        this.userGetCStrings(argv),\n                        this.userGetCStrings(envp)),\n            newPid = Math.max(0, ...this.childset) + 1;\n\n        this.emit('syscall', {\n            func: 'spawn', \n            data: {pid: newPid, execv, env: this.core.env}\n        });\n        this.mem.setUint32(pid, newPid, true);\n        return 0;\n    }\n\n    wait(stat_loc: i32) {\n        this.debug(`wait(${stat_loc})`);\n        return this.waitBase(stat_loc);\n    }\n\n    wait3(stat_loc: i32, options: i32, rusage: i32) {\n        this.debug(`wait3(${stat_loc}, ${options}, ${rusage})`);\n        return this.waitBase(stat_loc);\n    }\n    \n    waitBase(stat_loc: i32) {\n        var pid = this.childq.dequeue(),\n            exitcode = this.childq.dequeue();\n        this.debug(`  -> ${pid}`);\n        if (stat_loc !== 0)\n            this.mem.setUint32(stat_loc, exitcode << 8, true);\n        return pid;\n    }\n\n    // - some helpers\n\n    userGetCString(addr: i32): Buffer {\n        if (addr == 0) return null;\n        let mem = Buffer.from(this.core.wasi.memory.buffer);\n        return mem.slice(addr, mem.indexOf(0, addr));\n    }\n\n    userGetCStrings(addr: i32) {\n        if (addr == 0) return null;\n        let l = [];\n        while(1) {\n            let s = this.mem.getUint32(addr, true);\n            if (s === 0) break;\n            l.push(this.userGetCString(s));\n            addr += 4;\n        }\n        return l;\n    }\n\n    userCStringMalloc(s: string, pbuf: i32) {\n        this.pending.push(() => {\n            let buf = this.mem.getUint32(pbuf, true);\n            this.membuf.write(s, buf);\n        });\n        return s.length;\n    }\n\n    /**\n     * Used to invoke blocks: returns a function\n     * @param block a C block pointer\n     */\n    blockImpl(block: i32) {\n        let impl = this.funcTable.get(\n            this.mem.getUint32(block + 12, true));\n        return (...args: any) => impl(block, ...args);\n    }\n\n    // ------------\n    // Signals Part\n    // ------------\n\n    sigkill(signum: number) {\n        this.sigvec.send(signum);\n    }\n\n    sigsuspend(/* ... */) {\n        this.sigvec.receive();\n    }\n\n    sigaction(signum: i32, act: i32, oact: i32) {\n        this.debug('sigaction', signum, act, oact);\n        var sa_handler = this.mem.getUint32(act, true);\n        var h = <sighandler>this.funcTable.get(sa_handler);\n        this.debug(' -->', sa_handler, h);\n        this.sigvec.handlers[signum] = h;\n        if (oact != 0) {\n            this.mem.setUint32(oact, 0);\n        }\n    }\n\n    __SIG_IGN() { } /** @todo __SIG_DFL, __SIG_ERR */\n\n    // -----------\n    // Memory Part\n    // -----------\n\n    getpagesize() {\n        return 4096;\n    }\n\n}\n\nconst AT_FDCWD = -100;\n\nconst RIGHTS_ALL = {\n    base: constants.RIGHTS_ALL,\n    inheriting: constants.RIGHTS_ALL\n};\n\ntype ProcOptions = {\n    funcTableSz? : number\n};\n\n\nclass SignalVector extends EventEmitter {\n\n    wait: Int32Array;\n    _snapshot?: Int32Array;\n    handlers: sighandler[];\n\n    debug: (...args: any) => void\n\n    constructor(_from: SignalVectorProps={}) {\n        super();\n        this.wait = _from.wait || new Int32Array(new MaybeSharedArrayBuffer(4 * NSIG));\n        this.handlers = Array(NSIG);\n    }\n\n    static from(props: SignalVectorProps) { return new SignalVector(props); }\n\n    to(): SignalVectorProps {\n        return {wait: this.wait};\n    }\n\n    send(signum: number) {\n        assert(0 < signum && signum < NSIG);\n        Atomics.add(this.wait, 0, 1);\n        Atomics.add(this.wait, signum, 1);\n        Atomics.notify(this.wait, 0, 1);\n    }\n\n    receive(signums?: number[]) {\n        if (!this._snapshot) this._snapshot = new Int32Array(NSIG);\n\n        Atomics.wait(this.wait, 0, Atomics.load(this.wait, 0));\n\n        this.sweep(signums);\n        return -1;\n    }\n\n    sweep(signums?: number[]) {\n        for (let i = 1; i < NSIG; i++) {\n            if (!signums || signums.includes(i)) {\n                let h = this.handlers[i];\n                if (h && this._snapshot[i] < this.wait[i]) {\n                    this.debug('calling', h);\n                    h(i);\n                } \n                this._snapshot[i] = this.wait[i];\n            }\n        }\n    }\n\n}\n\nconst PATH_MAX = 256;\n\ntype SignalVectorProps = {\n    wait?: Int32Array\n};\n\ntype i32 = number;\ntype sighandler = (signum: number) => void;\n\nconst NSIG = 20;\n\n\ntype ChildProcessQueue = SharedQueue<Uint32Array>;\n\n\nclass ExecvCall {\n    prog: string\n    argv: Buffer[]\n    envp: Buffer[]\n    constructor(prog: string, argv: Buffer[], envp: Buffer[]) {\n        this.prog = prog;\n        this.argv = argv;\n        this.envp = envp;\n    }\n}\n\nclass Longjmp {\n    env: i32\n    val: i32\n    constructor(env: i32, val: i32) {\n        this.env = env;\n        this.val = val;\n    }\n}\n\nconst MaybeSharedArrayBuffer = typeof SharedArrayBuffer != 'undefined'\n    ? SharedArrayBuffer : ArrayBuffer;\n\nfunction bindAll(instance: any, methods: string[]) {\n    return methods.reduce((d, m) =>\n        Object.assign(d, {[m]: instance[m].bind(instance)}), {});\n}\n\n\n\nexport { Proc, SignalVector, ChildProcessQueue }\n","declare var window: any;\n\nconst isNode = global.process && global.process.versions && global.process.versions.node;\n\nconst isBrowser = typeof window === 'object' || typeof DedicatedWorkerGlobalScope === 'function';\n\n\nexport { isNode, isBrowser }","import { isNode, isBrowser } from '../../infra/arch';\nimport { Worker as WorkerThread } from 'worker_threads';\n\n\nlet WorkerImpl, postMessage, onMessage;\n\nif (isBrowser) {\n    WorkerImpl = self.Worker;\n    postMessage = self.postMessage;\n    onMessage = (handler) => addEventListener('message', handler);\n}\nelse if (isNode) {\n    const workerThreads = (0||require)('worker_threads');\n\n    // @ts-ignore\n    class WorkerAdapter implements Worker {\n        thread: WorkerThread;\n        constructor(stringUrl: string) {\n            this.thread = new workerThreads.Worker(stringUrl);\n        }\n        addEventListener(eventName: string, handler: (ev: any) => void): void {\n            this.thread.on(eventName, (ev) => {\n                handler({data: ev});\n            });\n        }\n        postMessage(msg: any) {\n            this.thread.postMessage(msg);\n        }\n        static onMessage(handler: (ev: any) => void) {\n            workerThreads.parentPort.on('message', (ev) => {\n                handler({data: ev});\n            });\n        }\n        static postMessage(msg: any) {\n            workerThreads.parentPort.postMessage(msg);\n        }\n    }\n\n    WorkerImpl = WorkerAdapter;\n    onMessage = WorkerAdapter.onMessage;\n    postMessage = WorkerAdapter.postMessage;\n}\n\n\n\nexport { WorkerImpl as Worker, onMessage, postMessage };    \n","var bundleURL = null;\nfunction getBundleURLCached() {\n  if (!bundleURL) {\n    bundleURL = getBundleURL();\n  }\n\n  return bundleURL;\n}\n\nfunction getBundleURL() {\n  // Attempt to find the URL of the current script and use that as the base URL\n  try {\n    throw new Error;\n  } catch (err) {\n    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\\/\\/[^)\\n]+/g);\n    if (matches) {\n      return getBaseURL(matches[0]);\n    }\n  }\n\n  return '/';\n}\n\nfunction getBaseURL(url) {\n  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\\/\\/.+)\\/[^/]+$/, '$1') + '/';\n}\n\nexports.getBundleURL = getBundleURLCached;\nexports.getBaseURL = getBaseURL;\n","var getBundleURL = require('./bundle-url').getBundleURL;\n\nfunction loadBundlesLazy(bundles) {\n  if (!Array.isArray(bundles)) {\n    bundles = [bundles]\n  }\n\n  var id = bundles[bundles.length - 1];\n\n  try {\n    return Promise.resolve(require(id));\n  } catch (err) {\n    if (err.code === 'MODULE_NOT_FOUND') {\n      return new LazyPromise(function (resolve, reject) {\n        loadBundles(bundles.slice(0, -1))\n          .then(function () {\n            return require(id);\n          })\n          .then(resolve, reject);\n      });\n    }\n\n    throw err;\n  }\n}\n\nfunction loadBundles(bundles) {\n  return Promise.all(bundles.map(loadBundle));\n}\n\nvar bundleLoaders = {};\nfunction registerBundleLoader(type, loader) {\n  bundleLoaders[type] = loader;\n}\n\nmodule.exports = exports = loadBundlesLazy;\nexports.load = loadBundles;\nexports.register = registerBundleLoader;\n\nvar bundles = {};\nfunction loadBundle(bundle) {\n  var id;\n  if (Array.isArray(bundle)) {\n    id = bundle[1];\n    bundle = bundle[0];\n  }\n\n  if (bundles[bundle]) {\n    return bundles[bundle];\n  }\n\n  var type = (bundle.substring(bundle.lastIndexOf('.') + 1, bundle.length) || bundle).toLowerCase();\n  var bundleLoader = bundleLoaders[type];\n  if (bundleLoader) {\n    return bundles[bundle] = bundleLoader(getBundleURL() + bundle)\n      .then(function (resolved) {\n        if (resolved) {\n          module.bundle.register(id, resolved);\n        }\n\n        return resolved;\n      }).catch(function(e) {\n        delete bundles[bundle];\n        \n        throw e;\n      });\n  }\n}\n\nfunction LazyPromise(executor) {\n  this.executor = executor;\n  this.promise = null;\n}\n\nLazyPromise.prototype.then = function (onSuccess, onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.then(onSuccess, onError)\n};\n\nLazyPromise.prototype.catch = function (onError) {\n  if (this.promise === null) this.promise = new Promise(this.executor)\n  return this.promise.catch(onError)\n};\n","import { EventEmitter } from 'events';\nimport { ExecCore } from \"../exec\";\n\n\n\nclass Tty extends EventEmitter {\n\n    core: ExecCore\n    fds: number[]\n    stdin_fl: number\n    termios: {flags: i32[], win: Uint16Array}\n\n    debug: (...args: any) => void;\n\n    constructor(core: ExecCore) {\n        super();\n        this.core = core;\n        this.fds = [];\n        this.stdin_fl = 0;\n        this.termios = {\n            flags: [0o402, 0o3, 0, 0o12],  /* see include/bits/termios.h */\n            win: this.defaultWindow()\n        };\n\n        this.core.on('stream:out', ev => {\n            if (this.fds.includes(ev.fd))\n                this.emit('data', ev.data);\n        });\n\n        this.debug = () => {};\n    }\n\n    to(): TtyProps { return {termios: {win: this.termios.win}}; }\n\n    makeTty(fd: number) {\n        // Make isatty(fd) return `true`\n        this.core.wasi.FD_MAP.get(fd).filetype = 2;\n        this.core.wasi.FD_MAP.get(fd).rights.base &= ~BigInt(0x24);\n    }\n\n    write(data: any) {\n        this.core.stdin.write(data);\n    }\n\n    // ------------------------------\n    // Overrides for WASI.wasiImports\n    // ------------------------------\n\n    fd_fdstat_set_flags(fd: number, flags: number) {\n        this.debug(`fdstat_set_flags(${fd}, ${flags})\\n`);\n        if (fd === 0) {\n            this.stdin_fl = flags;\n            this.core.stdin.blocking = !(flags & 0x4);\n        }\n        return 0;\n    }\n\n    fd_fdstat_get(fd: number, bufPtr: number) {\n        var ret = this.core.wasi.wasiImport.fd_fdstat_get(fd, bufPtr);\n        if (fd === 0) {\n            // overwrite: stats FDFLAG u16\n            this.core.proc.mem.setUint16(bufPtr + 2, this.stdin_fl, true);\n        }\n        return ret;\n    }\n\n    defaultWindow() {\n        var win = new Uint16Array(new SharedArrayBuffer(4));\n        win[0] = 24;  // rows\n        win[1] = 80;  // cols\n        return win;\n    }\n\n    get overrideImport() {\n        return bindAll(this, ['fd_fdstat_get', 'fd_fdstat_set_flags']);\n    }\n\n    get import() {\n        return bindAll(this, ['tcgetattr', 'tcsetattr', 'tgetent']);\n    }\n\n    get extlib() {\n        return bindAll(this, ['tty_ioctl']);\n    }\n\n    // ------------\n    // Termois Part\n    // ------------\n\n    tcgetattr(fd: i32, termios_p: i32) {\n        this.debug(`tcgetattr(${fd}, ${termios_p})`);\n        let mem = this.core.proc.mem;\n        this.termios.flags.forEach((fl, i) => {\n            mem.setUint32(termios_p + 4 * i, fl, true);\n        });\n\n        mem.setUint8(termios_p + (4 * 4) + 1 + 5, 0);  // VTIME\n        mem.setUint8(termios_p + (4 * 4) + 1 + 6, 1);  // VMIN\n\n        /* speed other control characters are skipped :\\ */\n        return 0;\n    }\n\n    tcsetattr(fd: i32, when: i32, termios_p: i32) {\n        this.debug(`tcsetattr(${fd}, ${when}, ${termios_p})`);\n        let mem = this.core.proc.mem,\n            flags = range(4).map(i => mem.getUint32(termios_p + 4 * i, true)),\n            cc = range(32).map(i => mem.getUint8(termios_p + (4 * 4) + 1 + i));\n        this.debug(`  [${flags.map(i => '0'+i.toString(8)).join(', ')}] [${cc}]`);\n        this.termios.flags = flags;\n        this.core.stdin.blocking = cc[6] > 0;   // VMIN\n        this.core.proc.emit('syscall', {\n            func: 'ioctl:tty',\n            data: {fd, when, flags}\n        })\n        return 0;\n    }\n\n    tgetent(bp: i32, name: i32) {\n        this.debug(`tgetent(_, '${this.core.proc.userGetCString(name)}')`);\n        return 1;\n    }\n\n    tty_ioctl(fd: i32, request: i32, buf: i32) {\n        console.warn('tty_ioctl', fd, request, buf);\n        if (fd == 1) {\n            var mem = this.core.proc.mem, win = this.termios.win;\n\n            switch (request) {\n            case TtyIoctls.TIOCGWINSZ:\n                for (let i = 0; i < win.length; i++)\n                    mem.setUint16(buf + 2 * i, win[i], true);\n                break;\n            case TtyIoctls.TIOCSWINSZ:\n                var setting = win.map((_,i) => mem.getUint16(buf + 2 * i));\n                this.core.proc.emit('syscall', {\n                    func: 'ioctl:tty',\n                    data: {fd, request, win: setting}\n                });\n                break;\n            }\n        }\n    }\n\n}\n\n\ntype i32 = number;\n\ntype TtyProps = {\n    termios: { win: Uint16Array }\n};\n\nenum TtyIoctls {\n    TCSETFL = 1,\n    TIOCGWINSZ = 0x5413,\n    TIOCSWINSZ = 0x5414\n};\n\nfunction bindAll(instance: any, methods: string[]) {\n    return methods.reduce((d, m) =>\n        Object.assign(d, {[m]: instance[m].bind(instance)}), {});\n}\n\nfunction range(n: number) : number[] {\n    return [...Array(n).keys()];\n}\n\n\nexport { Tty, TtyProps }\n","\n//declare function utf8encode(text: string): Uint8Array;\n\nvar utf8encode: (text: string) => Uint8Array;\n\nif (typeof TextEncoder !== 'undefined') {\n    utf8encode = (text: string) =>\n        new TextEncoder().encode(text);\n}\nelse {\n    utf8encode = (text: string) => Buffer.from(text);\n}\n\nvar utf8decode: (ui8a: Uint8Array) => string;\n\nif (typeof TextDecoder !== 'undefined') {\n    utf8decode = (ui8a: Uint8Array) =>\n        new TextDecoder().decode(ui8a);\n}\nelse {\n    utf8decode = (ui8a: Uint8Array) => Buffer.from(ui8a).toString('utf-8');\n}\n\nexport { utf8encode, utf8decode }\n","import { EventEmitter } from 'events';\nimport assert from 'assert';\nimport { WASI, WASIConfig } from '@wasmer/wasi';\nimport { WasmFs } from '@wasmer/wasmfs';\nimport * as transformer from '@wasmer/wasm-transformer';\nimport { IFs, createFsFromVolume } from 'memfs';\n\nimport { SimplexStream } from './streams';\nimport { Tty } from './bits/tty';\nimport { Proc } from './bits/proc';\n\nimport { utf8encode, utf8decode } from './bindings/utf8';\nimport { isBrowser } from '../infra/arch';\nimport { SharedVolume } from './services/shared-fs';\n\nWASI.defaultBindings =\n    isBrowser ? require(\"@wasmer/wasi/lib/bindings/browser\").default\n              : require(\"@wasmer/wasi/lib/bindings/node\").default;\n\n\n\nclass ExecCore extends EventEmitter {\n\n    opts: ExecCoreOptions\n    stdin: SimplexStream\n    wasmFs: WasmFs\n    env: Environ\n    argv: string[]\n    wasi: WASI\n    wasm: WebAssembly.WebAssemblyInstantiatedSource\n    stdioFds: any[]\n\n    tty: Tty\n    proc: Proc\n\n    exited: boolean\n\n    cached: Map<string, Promise<WebAssembly.Module>> /* cached binaries */\n\n    debug: (...args: any) => void\n    trace: (ui8a: Uint8Array) => void\n\n    constructor(opts: ExecCoreOptions = {}) {\n        super();\n        this.opts = opts = Object.assign({}, defaults, opts);\n        \n        // Configure envrionment\n        this.stdin = opts.stdin ? new SimplexStream() : null;\n        this.wasmFs = new WasmFs();\n\n        this.populateRootFs();\n\n        this.proc = new Proc(this);\n        this.tty = opts.tty ? new Tty(this) : null;\n        this.cached = (opts.cacheBins !== false) ? new Map() : null;\n\n        this.init();\n        \n        // Debug prints\n        if (this.opts.debug) {\n            this.debug = this._debugPrint();\n            this.trace = this._tracePrint();\n        }\n        else {\n            this.debug = this.trace = () => {};\n        }\n        if (this.tty)\n            this.tty.debug = (...a) => this.debug(...a);\n        this.proc.debug = (...a) => this.debug(...a);\n    }\n\n    init() {\n        this.argv = ['.'];\n        this.env = this.initialEnv();\n\n        // Instantiate a new WASI Instance\n        this.wasi = new WASI({\n            args: this.argv,\n            env: this.env,\n            bindings: {\n                ...WASI.defaultBindings,\n                exit: code => { throw new WASIExitError(code) },\n                fs: this.wasmFs.fs,\n                path: this.proc.path\n            },\n            preopens: {'/': '/', '.': '.'},\n            ...this.extraWASIConfig()\n        });\n        this.exited = false;\n\n        this.registerStdio();\n        this.proc.init();\n\n        // Initialize tty (for streaming stdin)\n        let tty = this.opts.tty;\n        if (tty) {\n            var fds = (typeof tty == 'number') ? [tty]\n                    : (typeof tty == 'boolean') ? [0,1,2] : tty;\n            this.tty.fds = fds;\n            for (let fd of fds)\n                this.tty.makeTty(fd);\n        }\n    }\n\n    reset() {\n        if (this.stdin) this.stdin.reset();\n        this.init();\n    }\n\n    async start(wasmUri: string, argv?: string[], env?: {}) {\n        if (this.exited) this.reset();\n\n        if (argv) this.argv.splice(0, Infinity, ...argv);\n        if (env)  Object.assign(this.env, env);\n\n        // Fetch Wasm binary and instantiate WebAssembly instance\n        var wamodule = await this.fetchCompile(wasmUri),\n            wainstance = await WebAssembly.instantiate(wamodule,\n                this.getImports(wamodule));\n        \n        this.wasm = {module: wamodule, instance: wainstance};\n    \n        // Start the WebAssembly WASI instance\n        try {\n            this.wasi.start(this.wasm.instance);\n            return 0;\n        }\n        catch (e) {\n            if (e instanceof WASIExitError) return e.code;\n            else throw e;\n        }\n        finally {\n            this.exited = true;\n        }\n    }\n\n    get fs(): IFs { return this.wasmFs.fs; }\n\n    async fetch(uri: string) {\n        if (typeof fetch !== 'undefined') {\n            const response = await fetch(uri);\n            return new Uint8Array(await response.arrayBuffer());\n        }\n        else {\n            const fs = require('fs');\n            return (0||fs.readFileSync)(uri);  // bypass Parcel\n        }\n    }\n\n    async fetchCompile(uri: string) {\n        return memoizeMaybe(this.cached, uri, async (uri: string) => {\n            var bytes = await this.fetch(uri);\n            bytes = await transformer.lowerI64Imports(bytes);\n            return WebAssembly.compile(bytes);\n        });\n    }\n\n    getImports(wamodule: WebAssembly.Module) {\n        // @fixme should really use WASI.getImports(), but it gets confused\n        //   by the presence of the wasi_ext namespace\n        var ns = new Set<string>(), imports = {};\n        for (let imp of WebAssembly.Module.imports(wamodule)) {\n            if (imp.module.startsWith('wasi_') && imp.module !== 'wasi_ext')\n                ns.add(imp.module);\n        }\n        for (let nm of ns) {\n            imports[nm] = this.wasi.wasiImport;\n        }\n        imports['wasi_ext'] = {...this.proc.extlib, ...(this.tty ? this.tty.extlib : {})};\n        imports['env'] = {...this.proc.import, ...(this.tty ? this.tty.import : {})};\n        return imports;\n    }\n\n    /**\n     * Returns an object that can be shared with a parent thread\n     * (via e.g. Worker.postMessage) to communicate with this core.\n     */\n    share(): any {\n        return {\n            stdin: this.stdin.to(),\n            tty: this.tty.to(),\n            sigvec: this.proc.sigvec.to(),\n            childq: this.proc.childq.to()\n        };\n    }\n    \n    emitWrite(fd: number, buffer: Buffer | Uint8Array) {\n        this.emit('stream:out', {fd: fd, data: buffer});\n        return buffer.length;\n    }\n\n    /**\n     * Initial environment variables\n     */\n    initialEnv() {\n        return this.opts.env ? Object.assign({}, this.opts.env) \n                             : this.defaultEnv();\n    }\n\n    defaultEnv() {\n        return {PATH: '/bin', PWD: '/home'};\n    }\n\n    extraWASIConfig(): WASIConfig {\n        let o = this.opts;\n        // @ts-ignore until @wasmer/wasi 0.12\n        return {traceSyscalls: o.trace && o.trace.syscalls}\n    }\n\n    registerStdio() {\n        var volume = this.wasmFs.volume;\n\n        if (!(volume.fds[0] && volume.fds[1] && volume.fds[2])) {\n            // stdio fds have been closed. re-init\n            volume.releasedFds = [0, 1, 2];\n            const fdErr = volume.openSync(\"/dev/stderr\", \"w\"),\n                  fdOut = volume.openSync(\"/dev/stdout\", \"w\"),\n                  fdIn = volume.openSync(\"/dev/stdin\", \"r\");\n            assert(fdIn == 0 && fdOut == 1 && fdErr == 2);\n        }\n\n        if (this.stdin)\n            volume.fds[0].read = this.stdin.read.bind(this.stdin);\n        volume.fds[1].write = d => this.emitWrite(1, d);\n        volume.fds[2].write = d => this.emitWrite(2, d);\n    }\n\n    mountFs(volume: SharedVolume) {\n        volume.fromJSON(this.wasmFs.volume.toJSON());\n        this.wasmFs.volume = volume;\n        this.wasmFs.fs = createFsFromVolume(volume);\n        // must recreate WASI now\n        this.init();\n    }\n\n    /**\n     * Bootstrapping filesystem contents\n     */\n    populateRootFs() {\n        this.wasmFs.fs.mkdirSync(\"/home\");\n        this.wasmFs.fs.mkdirSync(\"/bin\");\n    }\n\n    _debugPrint() {\n        return (global.process) ? /* console is funky in Node worker threads */\n            (...args: any) => this.emitWrite(2, utf8encode(args.join(\" \")+'\\n'))\n          : console.log;\n    }\n\n    _tracePrint() {\n        return (global.process) ? /* console is funky in Node worker threads */\n            (ui8a: Uint8Array) => this.emitWrite(2, ui8a)\n          : (ui8a: Uint8Array) => console.warn('[trace]', ui8a, utf8decode(ui8a));\n    }\n}\n\ntype ExecCoreOptions = {\n    stdin? : boolean,\n    tty? : boolean | number | [number],\n    funcTableSz? : number,\n    env?: Environ,\n    cacheBins?: boolean,\n    debug?: boolean,\n    trace?: {syscalls?: boolean}\n};\n\ntype Environ = {[k: string]: string};\n\nconst defaults: ExecCoreOptions = {stdin: true};\n\n\nfunction memoize<K, V>(cache: Map<K, V>, k: K, f: (k: K) => V) {\n    let v = cache.get(k);\n    if (!v) {\n        v = f(k);\n        cache.set(k, v);\n    }\n    return v;\n}\n\nfunction memoizeMaybe<K, V>(cache: Map<K, V>, k: K, f: (k: K) => V) {\n    return cache ? memoize(cache, k, f) : f(k);\n}\n\n\n/**\n * @wasmer/wasi export this class as ES5  :/\n * This kills instanceof. So redefining it here. -_-\n */\nexport class WASIExitError /* extends Error*/ {\n    code: number | null;\n    constructor(code: number | null) {\n        //super(`WASI Exit error: ${code}`);\n        this.code = code;\n    }\n}\n\n\nexport {ExecCore, Environ, ExecCoreOptions}\n","import { EventEmitter } from 'events';\n\nimport { SimplexStream, TransformStreamDuplex } from './streams';\nimport { TtyProps } from './bits/tty';\nimport { SignalVector, ChildProcessQueue } from './bits/proc';\n\nimport { Worker } from './bindings/workers';\nimport { SharedQueue } from './bits/queue';\nimport { ExecCore, ExecCoreOptions } from './exec';\nimport { SharedVolume } from './services/shared-fs';\n\n\n\nabstract class ProcessBase extends EventEmitter {\n\n    opts: ProcessStartupOptions\n\n    stdin:  TransformStreamDuplex\n    stdout: TransformStreamDuplex\n\n    stdin_raw: SimplexStream\n    tty: TtyProps\n    sigvec: SignalVector\n    childq: ChildProcessQueue\n\n    exited: boolean\n\n    constructor(opts: ProcessStartupOptions) {\n        super();\n        this.opts = opts;\n        \n        if (this.setupEncoder()) {\n            this.stdout = new TransformStreamDuplex(new TextDecoderStream());\n        }\n        else if (typeof process !== 'undefined' && process.stdin) {\n            process.stdin.on('data', buf => this.stdin_raw.write(buf));\n            this.stdout = <any>process.stdout;\n        }\n\n        this.on('exit', () => this.exited = true);\n    }\n\n    abstract exec(wasm: string, argv?: string[]): void;\n\n    waitFor() {\n        var herr: (e: Error) => void, hexit: (ev: {code:number}) => void;\n\n        return new Promise((resolve, reject) => {\n            this.on('error', herr = (e: Error) => reject(e));\n            this.on('exit', hexit = (ev: {code:number}) => resolve(ev));\n        }).finally(() => {\n            this.removeListener('error', herr);\n            this.removeListener('exit', hexit);\n        });\n    }\n    \n    reset() {\n        this.exited = false;\n        this.stdin_raw.reset();\n        this.setupEncoder();\n    }\n\n    setupEncoder() {\n        if (typeof TextEncoderStream !== 'undefined') {\n            this.stdin = new TransformStreamDuplex(new TextEncoderStream());\n            this.stdin.on('data', bytes => this.stdin_raw.write(bytes));\n            this.stdin.on('end', () => this.stdin_raw.end());\n            return true;\n        }\n        else return false;\n    }\n\n}\n\n\n/**\n * Suitable for running a WASI process in a Web Worker or\n * a Node.js worker thread.\n */\nclass WorkerProcess extends ProcessBase {\n\n    worker : Worker\n\n    constructor(wasm: string, opts: ProcessStartupOptions={}) {\n        super(opts);\n        this.worker = new Worker('./worker.ts');\n        this.worker.addEventListener('message', ev => {\n            if (ev.data.stdin)  this.stdin_raw = SimplexStream.from(ev.data.stdin);\n            if (ev.data.tty)    this.tty = ev.data.tty;\n            if (ev.data.sigvec) this.sigvec = SignalVector.from(ev.data.sigvec);\n            if (ev.data.childq) this.childq = SharedQueue.from(ev.data.childq);\n            if (ev.data.fd)     this.stdout.write(ev.data.data);\n\n            if (ev.data.event)  this.emit(ev.data.event, ev.data.arg, wasm);\n        });\n\n        if (wasm) this.exec(wasm);\n    }\n\n    mountFs(volume: SharedVolume) {\n        this.worker.postMessage({volume: volume.to()});\n        return this;\n    }\n\n    exec(wasm: string, argv?: string[]) {\n        if (this.exited) this.reset();\n        if (argv) this.opts.argv = argv;\n        this.worker.postMessage({exec: wasm, opts: this.opts});\n    }\n}\n\n\nclass BareProcess extends ProcessBase {\n\n    core: ExecCore;\n\n    constructor(wasm: string, opts: ProcessStartupOptions={}) {\n        super(opts);\n        this.exec(wasm);\n    }\n\n    async exec(wasm: string, argv?: string[]) {\n        const {ExecCore} = await import('./exec');  // on-demand import\n\n        this.core = new ExecCore({argv, ...this.opts});\n        this.core.on('stream:out', ev => process.stdout.write(ev.data));\n        try {\n            let exitcode = await this.core.start(wasm, this.opts.argv);\n            this.emit('exit', {code: exitcode});\n        }\n        catch (err) {\n            this.emit('error', err, wasm);\n        }\n    }\n}\n\n\ntype ProcessStartupOptions = ExecCoreOptions & {\n    argv?: string[];\n}\n\n\n\nexport { ProcessBase, WorkerProcess, BareProcess, ProcessStartupOptions }\n","import { fs as memfs, Volume } from 'memfs';\nimport { filenameToSteps } from 'memfs/lib/volume';\nimport { Node, Link } from 'memfs/lib/node';\nimport assert from 'assert';\n\n\n\nclass SharedVolume extends Volume {\n\n    dev: BlockDevice\n    root: LinkSharedVolume\n    inodes: {[ino: number]: NodeSharedVolume}\n\n    debug: (...a: any[]) => void\n\n    constructor(props: SharedVolumeProps = {}) {\n        let vol: SharedVolume;\n\n        class NodeInner {\n            constructor(ino: number, perm?: number) {\n                return new NodeSharedVolume(vol, ino, perm);\n            }\n        }\n\n        super({\n            Node: NodeInner,\n            Link: LinkSharedVolume\n        });\n        this.dev = BlockDevice.from(props.dev);\n\n        vol = this;\n\n        // root node was created before `vol` was initialized :\\\n        var rnode = this.root.getNode();\n        rnode.vol = this; rnode._link = this.root;\n\n        this.debug = () => {}; // console.log;\n    }\n\n    static from(props: SharedVolumeProps) {\n        return new SharedVolume(props);\n    }\n\n    to(): SharedVolumeProps {\n        return {dev: this.dev.to()};\n    }\n\n    writeBlob(path: string, buf: Uint8Array) {\n        var fd = this.openSync(path, memfs.constants.O_CREAT),\n            node = <NodeSharedVolume>this.fds[fd].node,\n            blob = this.dev.allocBlob(buf.length);\n        blob.set(buf, 0);\n        node.setBlob(blob);\n        this.closeSync(fd);\n    }\n\n    createLink(parent?: LinkSharedVolume, name?: string, isDirectory?: boolean, perm?: number): Link  {\n        const link = <LinkSharedVolume>super.createLink(parent, name, isDirectory, perm);\n        if (parent) {\n            this.debug('+ created link', parent.ino, name, link.ino);\n        }\n        link.push();\n        return link;\n    }\n\n    deleteLink(link: LinkSharedVolume) {\n        this.debug('deleted link', link.parent.ino, link.getName(), link.ino);\n        var parent = link.parent, ret = super.deleteLink(link);\n        parent.push();\n        return ret;\n    }\n\n    createNode(isDirectory: boolean = false, perm?: number): NodeSharedVolume {\n        if (!this.dev) return <NodeSharedVolume>super.createNode(isDirectory, perm);\n        const node = <NodeSharedVolume>new this.props.Node(this.dev.alloc(), perm);\n        if (isDirectory) node.setIsDirectory();\n        this.inodes[node.ino] = node;\n        node.push();\n        return node;    \n    }\n\n    getNodeShared(ino: number) {\n        return this.inodes[ino] || this._fetchNode(ino);\n    }\n\n    createSymlink(target: string, filename: string) {\n        this.symlinkSync('', filename);\n        var link = this.getLink(filenameToSteps(filename));\n\n        var steps = target.split('/');\n        if (steps[0] == '') steps.splice(0, 1);\n        else steps.splice(0, 0, '.')\n        link.getNode().makeSymlink(steps);\n        return link;\n    }\n\n    /**\n     * Overriding this from memfs Volume to support relative symlinks.\n     */\n    getResolvedLink(filenameOrSteps: string | string[]): Link | null {\n        let steps: string[] = typeof filenameOrSteps === 'string' ? filenameToSteps(filenameOrSteps) : filenameOrSteps;\n    \n        let link: Link = this.root;\n\n        for (let i = 0; i < steps.length;) {\n            const step = steps[i],\n                  child = link.getChild(step);\n            if (!child) return null;\n        \n            const node = child.getNode();\n            if (node.isSymlink()) {\n                steps = node.symlink.concat(steps.slice(i + 1));\n                i = 0;\n                if (steps[0] !== '.') {\n                    link = this.root;\n                    continue;\n                }\n            }\n            else\n                link = child;\n\n            i++;\n        }\n    \n        return link;\n    }\n          \n    _fetchNode(ino: number) {\n        var node = <NodeSharedVolume>new this.props.Node(ino);\n        this.inodes[ino] = node;\n        return node;\n    }\n}\n\ntype SharedVolumeProps = {\n    dev?: BlockDeviceProps\n};\n\n\nclass BlockDevice {\n\n    blockSize: number\n    blockCount: number\n    raw: ArrayBuffer\n    bitset: Uint8Array\n\n    cursors: Uint32Array\n\n    constructor(props: BlockDeviceProps = {}) {\n        this.raw = props.raw || new SharedArrayBuffer(props.size || 1 << 20);\n        this.blockSize = props.blockSize || 1 << 10;\n        this.blockCount = this.raw.byteLength / this.blockSize;\n        this.bitset = props.bitset || new Uint8Array(new SharedArrayBuffer(this.blockCount));\n        this.cursors = props.cursors || new Uint32Array(new SharedArrayBuffer(3 * 4));\n        if (!props.cursors) {\n            this.blockCursor = 2;\n            this.boundaryCursor = 2;\n            this.blobCursor = this.raw.byteLength;\n        }\n    }\n\n    static from(props: BlockDeviceProps) {\n        return new BlockDevice(props);\n    }\n\n    to(): BlockDeviceProps {\n        return {raw: this.raw, blockSize: this.blockSize, bitset: this.bitset,\n                cursors: this.cursors};\n    }\n\n    get(blockNo: number) {\n        var offset = blockNo * this.blockSize;\n        return new Uint8Array(this.raw, offset, this.blockSize);\n    }\n\n    isFree(blockNo: number) {\n        return Atomics.load(this.bitset, blockNo) == 0;\n    }\n\n    // Cursor accessors\n    // (not atomic, for performance :\\)\n    get blockCursor()              { return this.cursors[0]; }\n    set blockCursor(i: number)     { this.cursors[0] = i; }\n    get boundaryCursor()           { return this.cursors[1]; }\n    set boundaryCursor(i: number)  { this.cursors[1] = i; }\n    get blobCursor()               { return this.cursors[2]; }\n    set blobCursor(i: number)      { this.cursors[2] = i; }\n\n    alloc() {\n        let high = this.blobCursor / this.blockSize;\n        for (let i = this.blockCursor; i < high; i++) {\n            if (this.bitset[i] == 0 && \n                Atomics.compareExchange(this.bitset, i, 0, 1) == 0) {\n                this.blockCursor = i;\n                this.boundaryCursor = Math.max(this.boundaryCursor, i + 1);\n                return i;\n            }\n        }\n        throw new Error(\"no space left on device\");\n    }\n\n    allocBlob(size: number) {\n        var offset = this.blobCursor - size;\n        if (offset < this.boundaryCursor * this.blockSize)\n            throw new Error(\"no space left on device\");\n        this.blobCursor = offset;\n        return this.getBlob(offset, size);\n    }\n\n    getBlob(offset: number, size: number): Buffer {\n        var blob = new Uint8Array(this.raw, offset, size);\n        Object.setPrototypeOf(blob, Buffer.prototype)\n        return blob as Buffer;\n    }\n\n    readText(blockNo: number, offset = 0) {\n        var buf = this.get(blockNo);\n        buf = buf.slice(offset, buf.indexOf(0, offset));\n        return {buf: new TextDecoder('utf-8').decode(buf),\n                size: buf.length + 1};\n    }\n\n    read(blockNo: number, offset = 0, size?: number) {\n        var buf = this.get(blockNo).slice(offset,\n                        (size >= 0) ? offset + size : undefined);\n        return {buf, size: buf.length};\n    }\n\n    readInto(blockNo: number, offset: number, size: number,\n             buf: Uint8Array, at: number) {\n        var a = this.get(blockNo).subarray(offset, offset + size);\n        buf.set(a, at);\n        return a.length;\n    }\n\n    writeText(blockNo: number, value: string, offset = 0) {\n        // always utf-8 (also, for some reason TextEncoder doesn't work)\n        var bytes = Buffer.from(value + '\\0', 'utf-8');\n        if (bytes.length + offset > this.blockSize) {\n            throw new Error(`inode text overflow (block=${blockNo}, length=${bytes.length})`);\n        }\n        return this.write(blockNo, bytes, offset);\n    }\n\n    write(blockNo: number, value: Uint8Array, offset = 0) {\n        if (offset + value.length > this.blockSize)\n            value = value.subarray(0, this.blockSize - offset);\n        this.get(blockNo).set(value, offset);\n        return value.length;\n    }\n\n}\n\ntype BlockDeviceProps = {\n    blockSize?: number\n    size?: number\n    raw?: ArrayBuffer\n    bitset?: Uint8Array\n    cursors?: Uint32Array\n};\n\n\nclass NodeSharedVolume extends Node {\n\n    vol: SharedVolume\n    ver: number\n    isBlob: boolean\n    _link?: LinkSharedVolume\n\n    constructor(vol: SharedVolume, ino: number, perm?: number) {\n        super(ino, perm)\n        this.vol = vol;\n        this.ver = 0;\n        this.isBlob = false;\n        this._link = null;\n    }\n\n    setModeProperty(property: number) {\n        super.setModeProperty(property);\n        // parent class implementation does not call touch()\n        this.ver++;\n        this.push();\n    }\n\n    getLink(parent?: LinkSharedVolume, name?: string) {\n        if (!this._link) {\n            assert(parent && name);\n            this._link = new LinkSharedVolume(this.vol, parent, name);\n            this._link.setNode(this);\n        }\n        return this._link;\n    }\n\n    setBlob(blob: Buffer) {\n        this.buf = blob;\n        this.isBlob = true;\n        this.touch();\n    }\n\n    touch() {\n        super.touch();\n        this.ver++;\n        this.push();\n    }\n  \n    del() {\n        super.del();\n    }\n\n    push() {\n        if (this.vol && this.vol.dev) {\n            var blk = this.vol.dev.get(this.ino),\n                header: InodeData = {p: this.perm, m: this.mode, v: this.ver},\n                buf = this.buf;\n            if (blk[0] != 0)\n                header = Object.assign(this._read().header, header);  // in case there is link data too\n            if (buf) header.z = buf.length;\n            if (this.isBlob) {\n                header.blob = [buf.byteOffset];\n                buf = undefined;\n            }\n            if (this.symlink) {\n                header.symlink = this.symlink;\n            }\n            this.vol.debug('+ push node', this.ino, header);\n            var wrc = this._write(header, buf);\n            this._writeTrail(buf, wrc);\n        }        \n    }\n\n    pull() {\n        if (!this.vol) return;\n        var blk = this.vol.dev.get(this.ino);\n        if (blk[0] != 0) {\n            var {header, rdc} = this._read();\n            this.vol.debug('- pull node', this.ino, header);\n            this.perm = header.p;\n            this.mode = header.m;\n            this.symlink = header.symlink;\n            if (this.symlink)\n                console.log('symlink', this.symlink);\n            if (this.ver != header.v) {\n                this.ver = header.v;\n                if (header.z >= 0) {\n                    if (header.blob) {\n                        this.buf = this.vol.dev.getBlob(header.blob[0], header.z);\n                        this.isBlob = true;\n                    }\n                    else {\n                        var buf = Buffer.alloc(header.z),\n                            offset = this.vol.dev.readInto(this.ino, rdc, header.z, buf, 0);\n                        if (header.n > 0)\n                            this._readTrail(buf, offset);\n                        this.buf = buf;\n                        this.isBlob = false;\n                    }\n                }\n            }\n        }\n    }\n\n    _read(): {header: InodeData, rdc?: number} {\n        var {buf: json, size} = this.vol.dev.readText(this.ino),\n            header = JSON.parse(json);\n        return {header, rdc: size};\n    }\n\n    _write(header: InodeData, buf?: Uint8Array) {\n        var wrc = this._writeJson(header || {});\n        if (buf && wrc + buf.length > this.vol.dev.blockSize) {\n            var n = this._next(header).ino;\n            wrc = this._writeJson(Object.assign({}, header, {n}));\n        }\n        return buf ?\n            this.vol.dev.write(this.ino, buf, wrc) : 0;\n    }\n\n    _writeJson(obj: {}) {\n        return this.vol.dev.writeText(this.ino, JSON.stringify(obj));\n    }\n\n    _writeTrail(buf: Uint8Array, offset: number) {\n        var node: NodeSharedVolume = this;\n        while (buf && offset < buf.length) {\n            buf = buf.subarray(offset);\n            node = node._next();\n            offset = node._write(null, buf);\n            assert(offset > 0);\n        }\n    }\n\n    _readTrail(buf: Uint8Array, offset: number) {\n        var node: NodeSharedVolume = this;\n        //console.warn(\"read trail\", this.ino);\n        while (offset < buf.length) {\n            node = node._next();\n            var {header, rdc} = node._read();\n            rdc = this.vol.dev.readInto(node.ino, rdc, buf.length - offset, buf, offset);\n            assert(rdc > 0);\n            offset += rdc;\n            if (!(header.n >= 0)) break;\n        }\n        assert(offset == buf.length);\n    }\n\n    _next(header?: InodeData) {\n        if (!header) header = this._read().header;\n        return header.n >= 0 ? \n            this.vol.getNodeShared(header.n) : this.vol.createNode();\n    }\n\n}\n\n\nclass LinkSharedVolume extends Link {\n\n    vol: SharedVolume\n    parent: LinkSharedVolume\n    node: NodeSharedVolume\n\n    ver: number\n    _dirty: boolean\n\n    constructor(vol: SharedVolume, parent: Link, name: string) {\n        super(vol, parent, name);\n        this.ver = 0;\n        this._dirty = false;\n        return <any>new Proxy(this, new ProxyHandlers.LinkHandler());\n        //this.children = new Proxy(this.children,\n        //    new ProxyHandlers.LinkChildren(this));\n    }\n\n    createChild(name: string, node: NodeSharedVolume = this.vol.createNode()): LinkSharedVolume {\n        this._dirty = true;\n        const link = new LinkSharedVolume(this.vol, this, name);\n        link.setNode(node);\n        this.setChild(name, link);\n        return link;\n    }\n\n    setChild(name: string, link?: Link) {\n        this._dirty = true;\n        link = super.setChild(name, link);\n        this.touch();\n        return link;\n    }\n\n    deleteChild(link: Link) {\n        this._dirty = true;\n        super.deleteChild(link);\n        this.touch();\n    }\n\n    touch() {\n        this.vol.getNodeShared(this.ino).ver++;\n        this.push();\n    }\n\n    setNode(node: NodeSharedVolume) {\n        super.setNode(node);\n        node._link = this;   // need also the backward link\n    }\n\n    getNode() {\n        const node = this.node;\n        assert(node, 'LinkSharedVolume.node is unset');\n        node.pull();\n        return node;\n    }\n\n    push() {\n        if (this.vol.dev) {\n            var c: LinkData = {};\n            for (let [name, link] of Object.entries(this.children)) {\n                c[name] = {ino: link.ino};\n            }\n            var node = this.getNode(),\n                data = JSON.stringify(c);\n            this.vol.debug('+ push link', this.ino, data);\n            node.buf = Buffer.from(data);\n            node.ver++;\n            node.push();\n            this.ver = node.ver;\n            this._dirty = false;\n        }\n    }\n\n    pull() {\n        var blk = this.vol.dev.get(this.ino);\n        if (blk[0] != 0) {\n            var node = this.getNode();\n            node.pull();\n            if (node.isDirectory() && node.buf && node.ver !== this.ver) {\n                var c: LinkData = JSON.parse(node.buf.toString('utf-8'));\n                this.vol.debug('- pull link', this.ino, c);\n                var children = {};\n                for (let [name, linkData] of Object.entries(c || {})) {\n                    if (typeof linkData.ino === 'number') {\n                        let inode = this.vol.getNodeShared(linkData.ino);\n                        children[name] = inode.getLink(this, name);\n                    }\n                }\n                this.children = children;\n                this.ver = node.ver;\n                this._dirty = false;\n            }\n        }\n    }\n\n}\n\n\ntype InodeData = {\n    p: number\n    m: number\n    z?: number\n    n?: number\n    v?: number\n    symlink?: string[]\n    blob?: [number]\n};\n\ntype LinkData = {[name: string]: {ino: number}};\n\n\nnamespace ProxyHandlers {\n\n    /**\n     * Proxy handler for LinkSharedVolume.\n     */\n    export class LinkHandler {\n        get(link: LinkSharedVolume, name: string) {\n            if (name === 'children' && link.vol.dev && !link._dirty) {\n                link.pull();\n            }\n            return link[name];\n        }\n    }\n\n    /**\n     * Proxy handler for LinkSharedVolume.children.\n     * (currently not in use as it seems to make things slower.)\n     */\n    export class LinkChildren {\n        link: LinkSharedVolume;\n        constructor(link: LinkSharedVolume) { this.link = link; }\n\n        getOwnPropertyDescriptor(children: {}, name: string) {\n            this.link.pull();\n            return children.hasOwnProperty(name) ? \n                {configurable: true, enumerable: true} : undefined;\n        }\n\n        get(children: {}, name: string) {\n            this.link.pull();\n            return children[name];\n        }\n\n        set(children: {}, name: string, value: any) {\n            // this is needed to prevent getOwnPropertyDescriptor from being\n            // called recursively from LinkSharedVolume.pull()\n            children[name] = value;\n            return true;\n        }\n    }\n\n}\n\n\nexport { SharedVolume, SharedVolumeProps, BlockDevice, BlockDeviceProps }\n","export { ProcessBase as Process, WorkerProcess, BareProcess } from './process';\nexport { ExecCore, ExecCoreOptions } from './exec';\nexport { SharedVolume } from './services/shared-fs';\n","var fs = require('fs');\n\nmodule.exports = function loadJSBundle(bundle) {\n  return new Promise(function(resolve, reject) {\n    fs.readFile(__dirname + bundle, 'utf8', function(err, data) {\n      if (err) {\n        reject(err);\n      } else {\n        // wait for the next event loop iteration, so we are sure\n        // the current module is fully loaded\n        setImmediate(function() {\n          resolve(data);\n        });\n      }\n    });\n  })\n  .then(function(code) {\n    new Function('', code)();\n  });\n};\n"]}