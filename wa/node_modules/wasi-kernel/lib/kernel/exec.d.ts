/// <reference types="node" />
import { EventEmitter } from 'events';
import { WASI, WASIConfig } from '@wasmer/wasi';
import { WasmFs } from '@wasmer/wasmfs';
import { IFs } from 'memfs';
import { SimplexStream } from './streams';
import { Tty } from './bits/tty';
import { Proc } from './bits/proc';
import { SharedVolume } from './services/shared-fs';
declare class ExecCore extends EventEmitter {
    opts: ExecCoreOptions;
    stdin: SimplexStream;
    wasmFs: WasmFs;
    env: Environ;
    argv: string[];
    wasi: WASI;
    wasm: WebAssembly.WebAssemblyInstantiatedSource;
    stdioFds: any[];
    tty: Tty;
    proc: Proc;
    exited: boolean;
    cached: Map<string, Promise<WebAssembly.Module>>;
    debug: (...args: any) => void;
    trace: (ui8a: Uint8Array) => void;
    constructor(opts?: ExecCoreOptions);
    init(): void;
    reset(): void;
    start(wasmUri: string, argv?: string[], env?: {}): Promise<number>;
    get fs(): IFs;
    fetch(uri: string): Promise<any>;
    fetchCompile(uri: string): Promise<WebAssembly.Module>;
    getImports(wamodule: WebAssembly.Module): {};
    /**
     * Returns an object that can be shared with a parent thread
     * (via e.g. Worker.postMessage) to communicate with this core.
     */
    share(): any;
    emitWrite(fd: number, buffer: Buffer | Uint8Array): number;
    /**
     * Initial environment variables
     */
    initialEnv(): Environ;
    defaultEnv(): {
        PATH: string;
        PWD: string;
    };
    extraWASIConfig(): WASIConfig;
    registerStdio(): void;
    mountFs(volume: SharedVolume): void;
    /**
     * Bootstrapping filesystem contents
     */
    populateRootFs(): void;
    _debugPrint(): {
        (...data: any[]): void;
        (message?: any, ...optionalParams: any[]): void;
    };
    _tracePrint(): (ui8a: Uint8Array) => void;
}
declare type ExecCoreOptions = {
    stdin?: boolean;
    tty?: boolean | number | [number];
    funcTableSz?: number;
    env?: Environ;
    cacheBins?: boolean;
    debug?: boolean;
    trace?: {
        syscalls?: boolean;
    };
};
declare type Environ = {
    [k: string]: string;
};
/**
 * @wasmer/wasi export this class as ES5  :/
 * This kills instanceof. So redefining it here. -_-
 */
export declare class WASIExitError {
    code: number | null;
    constructor(code: number | null);
}
export { ExecCore, Environ, ExecCoreOptions };
